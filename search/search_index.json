{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"System Design Journey","text":"<p>Welcome to my system design learning journey! This site documents my daily exploration of FAANG-level system design concepts and patterns.</p>"},{"location":"#about-this-journey","title":"About This Journey","text":"<p>I'm following a structured system design plan to build expertise in designing scalable, distributed systems. This site serves as:</p> <ul> <li>Daily Learning Log: Track progress and insights from each study session</li> <li>Knowledge Repository: Organize system design concepts and patterns</li> <li>Reference Guide: Quick access to important topics and resources</li> </ul>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Daily Logs - Day-by-day learning entries</li> <li>Topics - System design concepts organized by theme</li> <li>Resources - Useful links and references</li> </ul>"},{"location":"#current-focus","title":"Current Focus","text":"<p>Check out the Daily Logs section to see what I'm currently learning.</p>"},{"location":"#progress-tracking","title":"Progress Tracking","text":"<p>This journey is structured to cover:</p> <ul> <li>Fundamental system design concepts</li> <li>Scalability and performance optimization</li> <li>Database design and data modeling</li> <li>Distributed systems patterns</li> <li>Real-world system design case studies</li> <li>FAANG-style interview preparation</li> </ul> <p>Last updated: {{ git_revision_date }}</p>"},{"location":"about/","title":"About","text":""},{"location":"about/#about-this-project","title":"About This Project","text":"<p>This site documents my journey learning system design concepts, with a focus on preparing for FAANG-level technical interviews and building production-ready systems.</p>"},{"location":"about/#learning-approach","title":"Learning Approach","text":"<p>I'm following a structured daily plan that covers:</p> <ol> <li>Fundamental Concepts: Building a solid foundation in distributed systems</li> <li>Practical Application: Applying concepts to real-world scenarios</li> <li>Case Studies: Analyzing existing large-scale systems</li> <li>Practice: Regular design exercises and mock interviews</li> </ol>"},{"location":"about/#goals","title":"Goals","text":"<ul> <li>Master core system design principles</li> <li>Understand trade-offs in architectural decisions</li> <li>Build confidence in FAANG-level system design interviews</li> <li>Create a comprehensive reference guide for future use</li> </ul>"},{"location":"about/#site-structure","title":"Site Structure","text":"<p>This site is built using:</p> <ul> <li>MkDocs with Material theme</li> <li>GitHub Pages for hosting</li> <li>Markdown for content</li> <li>Mermaid for diagrams</li> </ul>"},{"location":"about/#contact","title":"Contact","text":"<p>Feel free to reach out or follow my journey:</p> <ul> <li>GitHub: @yourusername</li> </ul> <p>\u2190 Back to Home</p>"},{"location":"resources/","title":"Resources","text":"<p>A curated collection of resources for system design learning.</p>"},{"location":"resources/#books","title":"Books","text":"<ul> <li>Designing Data-Intensive Applications by Martin Kleppmann</li> <li>System Design Interview by Alex Xu (Volumes 1 &amp; 2)</li> <li>Building Microservices by Sam Newman</li> <li>The Art of Scalability by Martin L. Abbott &amp; Michael T. Fisher</li> </ul>"},{"location":"resources/#online-courses","title":"Online Courses","text":"<ul> <li>Grokking the System Design Interview</li> <li>System Design Primer (GitHub)</li> <li>ByteByteGo</li> </ul>"},{"location":"resources/#blogs-articles","title":"Blogs &amp; Articles","text":"<ul> <li>High Scalability Blog</li> <li>Netflix Tech Blog</li> <li>Uber Engineering Blog</li> <li>AWS Architecture Blog</li> <li>Google Cloud Architecture Center</li> </ul>"},{"location":"resources/#youtube-channels","title":"YouTube Channels","text":"<ul> <li>Gaurav Sen</li> <li>Tech Dummies Narendra L</li> <li>System Design Interview</li> <li>ByteByteGo</li> </ul>"},{"location":"resources/#tools-diagrams","title":"Tools &amp; Diagrams","text":"<ul> <li>Excalidraw - For system design diagrams</li> <li>draw.io - Diagramming tool</li> <li>Mermaid - Markdown-based diagrams</li> </ul>"},{"location":"resources/#practice-platforms","title":"Practice Platforms","text":"<ul> <li>LeetCode System Design Questions</li> <li>Pramp (Mock Interviews)</li> <li>interviewing.io</li> </ul>"},{"location":"resources/#key-repositories","title":"Key Repositories","text":"<ul> <li>System Design Primer</li> <li>Awesome System Design</li> </ul> <p>\u2190 Back to Home</p>"},{"location":"daily/","title":"Daily Learning Logs","text":"<p>This section contains my day-to-day learning entries, documenting progress, insights, and key takeaways.</p>"},{"location":"daily/#how-to-use-this-section","title":"How to Use This Section","text":"<p>Each daily log entry follows a consistent format:</p> <ul> <li>Date: When the learning session occurred</li> <li>Topics Covered: Main concepts explored</li> <li>Key Learnings: Important insights and takeaways</li> <li>Questions: Areas needing further exploration</li> <li>Resources: Links and references used</li> <li>Practice: Design problems or exercises completed</li> </ul>"},{"location":"daily/#recent-entries","title":"Recent Entries","text":"<p>Daily logs will appear here as you add them</p>"},{"location":"daily/#template-for-daily-entries","title":"Template for Daily Entries","text":"<pre><code># Day X - [Date]\n\n## Topics Covered\n- Topic 1\n- Topic 2\n\n## Key Learnings\n- Key insight 1\n- Key insight 2\n\n## System Design Concepts\n### Concept Name\nDescription and notes\n\n## Questions to Explore\n- [ ] Question 1\n- [ ] Question 2\n\n## Resources\n- [Link 1](url)\n- [Link 2](url)\n\n## Practice Problems\n- Problem description and solution approach\n\n## Reflections\nWhat went well, what to improve\n</code></pre>"},{"location":"daily/#archive-by-month","title":"Archive by Month","text":"<p>Organize your logs by month as they grow</p> <p>\u2190 Back to Home</p>"},{"location":"daily/2024-10-24/","title":"Day 1 - October 24, 2024","text":""},{"location":"daily/2024-10-24/#topics-covered","title":"Topics Covered","text":"<ul> <li>Setting up learning environment</li> <li>GitHub Pages and MkDocs setup</li> <li>Fundamental building blocks of distributed systems</li> <li>System design interview approach</li> <li>Scalability patterns from 1K to 10M+ users</li> </ul>"},{"location":"daily/2024-10-24/#key-learnings","title":"Key Learnings","text":"<ul> <li>Organized approach to system design learning is crucial</li> <li>Documentation helps solidify understanding</li> <li>Daily logging creates accountability and tracks progress</li> <li>Visual diagrams are essential for understanding system architecture</li> <li>Start simple, then scale incrementally</li> </ul>"},{"location":"daily/2024-10-24/#1-fundamental-building-blocks-of-distributed-systems","title":"1. Fundamental Building Blocks of Distributed Systems","text":""},{"location":"daily/2024-10-24/#system-architecture-overview","title":"System Architecture Overview","text":"<pre><code>graph TB\n    subgraph \"Client Layer\"\n        C1[Web Browser]\n        C2[Mobile App]\n        C3[API Client]\n    end\n\n    subgraph \"Edge Layer\"\n        CDN[CDN]\n        LB[Load Balancer]\n    end\n\n    subgraph \"Application Layer\"\n        API1[API Server 1]\n        API2[API Server 2]\n        API3[API Server 3]\n        Cache[(Cache)]\n    end\n\n    subgraph \"Data Layer\"\n        DB1[(Primary DB)]\n        DB2[(Replica DB)]\n        MQ[Message Queue]\n    end\n\n    subgraph \"Storage Layer\"\n        S3[Object Storage]\n        FS[File System]\n    end\n\n    C1 &amp; C2 &amp; C3 --&gt; CDN\n    CDN --&gt; LB\n    LB --&gt; API1 &amp; API2 &amp; API3\n    API1 &amp; API2 &amp; API3 --&gt; Cache\n    API1 &amp; API2 &amp; API3 --&gt; DB1\n    DB1 --&gt; DB2\n    API1 &amp; API2 &amp; API3 --&gt; MQ\n    API1 &amp; API2 &amp; API3 --&gt; S3</code></pre>"},{"location":"daily/2024-10-24/#load-balancers","title":"Load Balancers","text":"<pre><code>graph LR\n    Client[Client Requests] --&gt; LB{Load Balancer}\n    LB --&gt;|Round Robin| S1[Server 1]\n    LB --&gt;|Least Connections| S2[Server 2]\n    LB --&gt;|IP Hash| S3[Server 3]\n\n    style LB fill:#f9f,stroke:#333,stroke-width:4px</code></pre> <p>Key Algorithms:</p> <ul> <li>Round Robin: Distribute requests sequentially to each server in rotation</li> <li>Least Connections: Route to the server with the fewest active connections</li> <li>IP Hash: Consistently route the same client IP to the same server</li> </ul>"},{"location":"daily/2024-10-24/#caching-layers","title":"Caching Layers","text":"<pre><code>graph TD\n    Request[Client Request] --&gt; CDN{CDN Cache Hit?}\n    CDN --&gt;|Yes| Return1[Return Data]\n    CDN --&gt;|No| AppCache{App Cache Hit?}\n    AppCache --&gt;|Yes| Return2[Return Data]\n    AppCache --&gt;|No| DB[(Database)]\n    DB --&gt; AppCache\n    AppCache --&gt; CDN\n\n    style CDN fill:#9cf\n    style AppCache fill:#9cf</code></pre>"},{"location":"daily/2024-10-24/#database-replication","title":"Database Replication","text":"<pre><code>graph TB\n    App[Application Servers]\n    App --&gt;|Write| Master[(Master DB)]\n    App --&gt;|Read| R1[(Replica 1)]\n    App --&gt;|Read| R2[(Replica 2)]\n    App --&gt;|Read| R3[(Replica 3)]\n\n    Master -.-&gt;|Replicate| R1\n    Master -.-&gt;|Replicate| R2\n    Master -.-&gt;|Replicate| R3\n\n    style Master fill:#f96,stroke:#333,stroke-width:3px\n    style R1 fill:#9f9\n    style R2 fill:#9f9\n    style R3 fill:#9f9</code></pre>"},{"location":"daily/2024-10-24/#database-sharding","title":"Database Sharding","text":"<pre><code>graph TB\n    App[Application] --&gt; Router{Shard Router}\n\n    Router --&gt;|Users A-M| S1[(Shard 1&lt;br/&gt;A-M)]\n    Router --&gt;|Users N-Z| S2[(Shard 2&lt;br/&gt;N-Z)]\n    Router --&gt;|Users 0-9| S3[(Shard 3&lt;br/&gt;0-9)]\n\n    style Router fill:#ff9,stroke:#333,stroke-width:3px</code></pre> <p>Sharding Strategies: Range-based, Hash-based, Geographic</p>"},{"location":"daily/2024-10-24/#message-queues","title":"Message Queues","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant API\n    participant Queue\n    participant Worker\n    participant DB\n\n    Client-&gt;&gt;API: Upload Video\n    API-&gt;&gt;Queue: Add to processing queue\n    API--&gt;&gt;Client: 202 Accepted (Job ID)\n\n    Worker-&gt;&gt;Queue: Poll for jobs\n    Queue--&gt;&gt;Worker: Video processing task\n    Worker-&gt;&gt;Worker: Transcode video\n    Worker-&gt;&gt;DB: Update status\n    Worker-&gt;&gt;Client: Webhook notification</code></pre>"},{"location":"daily/2024-10-24/#microservices-architecture","title":"Microservices Architecture","text":"<pre><code>graph TB\n    Gateway[API Gateway]\n\n    Gateway --&gt; Auth[Auth Service]\n    Gateway --&gt; User[User Service]\n    Gateway --&gt; Order[Order Service]\n    Gateway --&gt; Payment[Payment Service]\n\n    Order --&gt; MQ[Message Queue]\n    Payment --&gt; MQ\n\n    Auth --&gt; AuthDB[(Auth DB)]\n    User --&gt; UserDB[(User DB)]\n    Order --&gt; OrderDB[(Order DB)]\n    Payment --&gt; PayDB[(Payment DB)]\n\n    style Gateway fill:#f9f,stroke:#333,stroke-width:3px</code></pre>"},{"location":"daily/2024-10-24/#cdn-architecture","title":"CDN Architecture","text":"<pre><code>graph TB\n    User1[User in US] --&gt; CDN_US[CDN Edge&lt;br/&gt;US East]\n    User2[User in EU] --&gt; CDN_EU[CDN Edge&lt;br/&gt;EU West]\n    User3[User in Asia] --&gt; CDN_ASIA[CDN Edge&lt;br/&gt;Singapore]\n\n    CDN_US -.-&gt;|Cache Miss| Origin[Origin Server]\n    CDN_EU -.-&gt;|Cache Miss| Origin\n    CDN_ASIA -.-&gt;|Cache Miss| Origin\n\n    Origin --&gt; S3[(Object Storage)]\n\n    style Origin fill:#f96\n    style CDN_US fill:#9cf\n    style CDN_EU fill:#9cf\n    style CDN_ASIA fill:#9cf</code></pre>"},{"location":"daily/2024-10-24/#2-system-design-interview-approach","title":"2. System Design Interview Approach","text":""},{"location":"daily/2024-10-24/#interview-flow","title":"Interview Flow","text":"<pre><code>graph LR\n    A[1. Requirements&lt;br/&gt;Functional + Non-Functional&lt;br/&gt;5-10 min] --&gt; B[2. Capacity Estimation&lt;br/&gt;3-5 min]\n    B --&gt; C[3. API Design&lt;br/&gt;+ Data Models&lt;br/&gt;5-7 min]\n    C --&gt; D[4. High-Level Design&lt;br/&gt;Satisfy functional requirements&lt;br/&gt;10-12 min]\n    D --&gt; E[5. Deep Dive&lt;br/&gt;Satisfy non-functional requirements&lt;br/&gt;12-15 min]\n    E --&gt; F[6. Bottlenecks &amp; Trade-offs&lt;br/&gt;5-10 min]\n\n    style A fill:#9cf\n    style B fill:#9f9\n    style C fill:#fc9\n    style D fill:#ff9\n    style E fill:#f9c\n    style F fill:#c9f</code></pre>"},{"location":"daily/2024-10-24/#step-1-functional-requirements","title":"Step 1: Functional Requirements","text":"<p>What the system DOES - Core features and user actions</p> <pre><code>mindmap\n  root((Functional&lt;br/&gt;Requirements))\n    User Actions\n      Sign up / Login\n      Create content\n      View content\n      Update/Delete\n      Search\n    Features\n      Feed generation\n      Notifications\n      Recommendations\n      Comments/Likes\n    Business Logic\n      Validation rules\n      Access control\n      Workflows</code></pre> <p>Example Questions: - What are the core features? - What can users do? - What happens when user performs action X? - Are there different user types/roles?</p>"},{"location":"daily/2024-10-24/#step-2-non-functional-requirements","title":"Step 2: Non-Functional Requirements","text":"<p>HOW WELL the system performs - Quality attributes</p> <pre><code>mindmap\n  root((Non-Functional&lt;br/&gt;Requirements))\n    Scalability\n      DAU/MAU?\n      QPS?\n      Data volume?\n      Growth rate?\n    Performance\n      Latency targets\n      Throughput\n      Response time\n    Availability\n      Uptime SLA\n      Fault tolerance\n      Recovery time\n    Consistency\n      Strong vs Eventual\n      CAP theorem\n      Data integrity\n    Security\n      Authentication\n      Authorization\n      Data privacy\n      Compliance</code></pre> <p>Example Questions: - How many users? (100M DAU) - Read vs Write ratio? (100:1) - What's acceptable latency? (&lt; 200ms) - Strong or eventual consistency? - Geographic distribution?</p>"},{"location":"daily/2024-10-24/#step-3-capacity-estimation","title":"Step 3: Capacity Estimation","text":"<pre><code>graph TB\n    Start[Requirements] --&gt; Users[Users&lt;br/&gt;100M DAU]\n    Users --&gt; Requests[Requests&lt;br/&gt;10 actions/user/day]\n    Requests --&gt; QPS[QPS Calculation&lt;br/&gt;100M \u00d7 10 / 86400]\n    QPS --&gt; Result[~12K QPS&lt;br/&gt;Peak: 36K QPS]\n\n    Start --&gt; Data[Data Volume]\n    Data --&gt; Storage[Storage Calc&lt;br/&gt;1KB per action]\n    Storage --&gt; Total[Daily: ~1TB&lt;br/&gt;Yearly: ~365TB]\n\n    style Result fill:#9f9\n    style Total fill:#9f9</code></pre> <p>Formulas: - QPS = (DAU \u00d7 actions_per_user) / 86,400 - Peak QPS = Average QPS \u00d7 3 - Storage = QPS \u00d7 data_size \u00d7 seconds_per_day</p>"},{"location":"daily/2024-10-24/#step-4-api-design","title":"Step 4: API Design","text":"<p>Define key endpoints early (subject to refinement in deep dive)</p> <pre><code>sequenceDiagram\n    participant Client\n    participant API Gateway\n    participant Service\n\n    Note over Client,Service: POST /api/v1/posts\n    Client-&gt;&gt;API Gateway: Create Post\n    API Gateway-&gt;&gt;Service: {user_id, content, media}\n    Service--&gt;&gt;API Gateway: 201 Created {post_id, timestamp}\n    API Gateway--&gt;&gt;Client: Response\n\n    Note over Client,Service: GET /api/v1/feed?user_id=456&amp;limit=20\n    Client-&gt;&gt;API Gateway: Get Feed\n    API Gateway-&gt;&gt;Service: Forward request\n    Service--&gt;&gt;API Gateway: 200 OK {posts: [...]}\n    API Gateway--&gt;&gt;Client: Response</code></pre> <p>Core APIs: - <code>POST /users</code> - Create user - <code>POST /posts</code> - Create content - <code>GET /feed</code> - Retrieve personalized feed - <code>GET /posts/:id</code> - Get specific post - <code>POST /posts/:id/like</code> - Like content - <code>DELETE /posts/:id</code> - Remove content</p>"},{"location":"daily/2024-10-24/#step-5-initial-data-models","title":"Step 5: Initial Data Models","text":"<p>High-level schema (will be refined during deep dive)</p> <pre><code>erDiagram\n    USER ||--o{ POST : creates\n    USER ||--o{ FOLLOW : follows\n    USER ||--o{ LIKE : likes\n    POST ||--o{ LIKE : receives\n    POST ||--o{ COMMENT : has\n\n    USER {\n        string user_id PK\n        string username\n        string email\n        string profile_pic\n        timestamp created_at\n    }\n\n    POST {\n        string post_id PK\n        string user_id FK\n        string content\n        string media_url\n        int like_count\n        timestamp created_at\n    }\n\n    FOLLOW {\n        string follower_id FK\n        string followee_id FK\n        timestamp created_at\n    }\n\n    LIKE {\n        string user_id FK\n        string post_id FK\n        timestamp created_at\n    }\n\n    COMMENT {\n        string comment_id PK\n        string post_id FK\n        string user_id FK\n        string content\n        timestamp created_at\n    }</code></pre> <p>Note: Data models will evolve during deep dive based on: - Query patterns - Sharding strategy - Denormalization needs - Caching requirements</p>"},{"location":"daily/2024-10-24/#step-6-high-level-design","title":"Step 6: High-Level Design","text":"<p>Goal: Satisfy functional requirements - focus on making features work</p> <pre><code>graph TB\n    Client[Clients] --&gt; DNS[DNS]\n    DNS --&gt; CDN[CDN]\n    CDN --&gt; LB[Load Balancer]\n\n    LB --&gt; API1[API Server]\n    LB --&gt; API2[API Server]\n\n    API1 &amp; API2 --&gt; Cache[(Redis Cache)]\n    API1 &amp; API2 --&gt; DB[(Primary DB)]\n\n    DB --&gt; Replica1[(Replica)]\n    DB --&gt; Replica2[(Replica)]\n\n    API1 &amp; API2 --&gt; Queue[Message Queue]\n    Queue --&gt; Worker1[Worker]\n    Queue --&gt; Worker2[Worker]\n\n    Worker1 &amp; Worker2 --&gt; Storage[(Object Storage)]\n\n    style LB fill:#f9f\n    style Cache fill:#9cf\n    style Queue fill:#ff9</code></pre> <p>At this stage: - Start simple - single region, basic components - Show data flow for key features - Map APIs to components - Demonstrate how functional requirements are met - Don't over-engineer yet!</p> <p>Example walkthrough: 1. User creates post \u2192 API Server \u2192 Save to DB 2. User views feed \u2192 API Server \u2192 Check Cache \u2192 Query DB if miss 3. Image upload \u2192 API Server \u2192 Queue \u2192 Worker \u2192 Object Storage</p>"},{"location":"daily/2024-10-24/#step-7-deep-dive","title":"Step 7: Deep Dive","text":"<p>Goal: Satisfy non-functional requirements - scale, performance, reliability</p> <pre><code>mindmap\n  root((Deep Dive&lt;br/&gt;Focus on NFRs))\n    Scalability\n      How to handle 100M users?\n      Database sharding strategy\n      Caching at scale\n      Horizontal scaling\n    Performance\n      How to achieve &lt;200ms latency?\n      Query optimization\n      Index design\n      CDN for static assets\n      Read replicas\n    Reliability\n      How to achieve 99.9% uptime?\n      Failover handling\n      Data replication\n      Multi-region deployment\n      Backup strategy\n    Consistency\n      Strong vs Eventual?\n      Write-through vs write-back cache\n      Replication lag handling\n    Security\n      Authentication (OAuth, JWT)\n      Rate limiting\n      Data encryption\n      DDoS protection</code></pre> <p>Typical Deep Dive Topics: - For 100M users: Add sharding, multiple cache clusters, auto-scaling - For &lt;200ms latency: Add edge locations, optimize queries, increase replicas - For high availability: Multi-AZ deployment, circuit breakers, health checks - For consistency: Choose replication strategy, handle conflicts</p> <p>Data Model Refinements: - Denormalize for read performance - Add composite indexes - Partition large tables - Add caching layer schemas</p>"},{"location":"daily/2024-10-24/#step-8-bottleneck-analysis-trade-offs","title":"Step 8: Bottleneck Analysis &amp; Trade-offs","text":"<pre><code>graph TB\n    subgraph \"Identify Bottlenecks\"\n        B1[Database writes&lt;br/&gt;Too slow?]\n        B2[Memory cache&lt;br/&gt;Insufficient?]\n        B3[Single point&lt;br/&gt;of failure?]\n        B4[Network&lt;br/&gt;bandwidth?]\n    end\n\n    subgraph \"Solutions\"\n        S1[Add write sharding&lt;br/&gt;Message queue]\n        S2[Scale cache tier&lt;br/&gt;Multiple Redis clusters]\n        S3[Add redundancy&lt;br/&gt;Multi-region deployment]\n        S4[Use CDN&lt;br/&gt;Compress data]\n    end\n\n    B1 --&gt; S1\n    B2 --&gt; S2\n    B3 --&gt; S3\n    B4 --&gt; S4\n\n    style B1 fill:#f99\n    style B2 fill:#f99\n    style B3 fill:#f99\n    style B4 fill:#f99\n    style S1 fill:#9f9\n    style S2 fill:#9f9\n    style S3 fill:#9f9\n    style S4 fill:#9f9</code></pre>"},{"location":"daily/2024-10-24/#trade-offs-discussion","title":"Trade-offs Discussion","text":"<pre><code>graph LR\n    subgraph \"Consistency vs Availability\"\n        C1[Strong Consistency&lt;br/&gt;SQL, ACID]\n        C2[Eventual Consistency&lt;br/&gt;NoSQL, BASE]\n    end\n\n    subgraph \"Latency vs Accuracy\"\n        L1[Real-time&lt;br/&gt;Approximate counts]\n        L2[Batch Processing&lt;br/&gt;Exact counts]\n    end\n\n    subgraph \"Cost vs Performance\"\n        P1[Premium Tier&lt;br/&gt;Low latency]\n        P2[Standard Tier&lt;br/&gt;Higher latency]\n    end\n\n    style C1 fill:#9cf\n    style C2 fill:#fc9\n    style L1 fill:#9cf\n    style L2 fill:#fc9\n    style P1 fill:#9cf\n    style P2 fill:#fc9</code></pre>"},{"location":"daily/2024-10-24/#interview-time-management","title":"Interview Time Management","text":"<pre><code>gantt\n    title 45-Minute System Design Interview\n    dateFormat mm\n    axisFormat %M min\n\n    section Requirements\n    Functional + Non-Functional :00, 10m\n\n    section Design\n    Capacity + API + Data Model :10, 8m\n    High-Level Design :18, 10m\n\n    section Deep Dive\n    NFR Optimization :28, 12m\n\n    section Wrap-up\n    Bottlenecks &amp; Trade-offs :40, 5m</code></pre>"},{"location":"daily/2024-10-24/#common-mistakes","title":"Common Mistakes","text":"<pre><code>graph TD\n    M1[\u274c Jumping to solution&lt;br/&gt;without clarifying]\n    M2[\u274c Over-engineering&lt;br/&gt;from the start]\n    M3[\u274c Ignoring constraints&lt;br/&gt;and scale]\n    M4[\u274c Not discussing&lt;br/&gt;trade-offs]\n    M5[\u274c Poor time&lt;br/&gt;management]\n\n    M1 --&gt; F1[\u2705 Ask questions first]\n    M2 --&gt; F2[\u2705 Start simple]\n    M3 --&gt; F3[\u2705 Calculate capacity]\n    M4 --&gt; F4[\u2705 Explain alternatives]\n    M5 --&gt; F5[\u2705 Watch the clock]\n\n    style M1 fill:#f99\n    style M2 fill:#f99\n    style M3 fill:#f99\n    style M4 fill:#f99\n    style M5 fill:#f99\n    style F1 fill:#9f9\n    style F2 fill:#9f9\n    style F3 fill:#9f9\n    style F4 fill:#9f9\n    style F5 fill:#9f9</code></pre>"},{"location":"daily/2024-10-24/#3-scalability-patterns","title":"3. Scalability Patterns","text":""},{"location":"daily/2024-10-24/#scaling-journey","title":"Scaling Journey","text":"<pre><code>graph LR\n    S1[1K Users&lt;br/&gt;Single Server] --&gt; S2[10K Users&lt;br/&gt;Add Cache + DB]\n    S2 --&gt; S3[100K Users&lt;br/&gt;Load Balancer&lt;br/&gt;+ Replicas]\n    S3 --&gt; S4[1M Users&lt;br/&gt;Sharding&lt;br/&gt;+ CDN]\n    S4 --&gt; S5[10M+ Users&lt;br/&gt;Microservices&lt;br/&gt;+ Multi-region]\n\n    style S1 fill:#9f9\n    style S2 fill:#9cf\n    style S3 fill:#ff9\n    style S4 fill:#f9c\n    style S5 fill:#f9f</code></pre>"},{"location":"daily/2024-10-24/#vertical-vs-horizontal-scaling","title":"Vertical vs Horizontal Scaling","text":"<pre><code>graph TB\n    subgraph \"Vertical Scaling (Scale Up)\"\n        V1[Small Server&lt;br/&gt;4 CPU, 8GB RAM] -.-&gt;|Upgrade| V2[Big Server&lt;br/&gt;16 CPU, 64GB RAM]\n    end\n\n    subgraph \"Horizontal Scaling (Scale Out)\"\n        LB[Load Balancer]\n        LB --&gt; H1[Server 1&lt;br/&gt;4 CPU, 8GB]\n        LB --&gt; H2[Server 2&lt;br/&gt;4 CPU, 8GB]\n        LB --&gt; H3[Server 3&lt;br/&gt;4 CPU, 8GB]\n        LB --&gt; H4[Server 4&lt;br/&gt;4 CPU, 8GB]\n    end\n\n    style V1 fill:#ff9\n    style V2 fill:#9f9\n    style LB fill:#f9f</code></pre>"},{"location":"daily/2024-10-24/#cache-aside-pattern","title":"Cache-Aside Pattern","text":"<pre><code>sequenceDiagram\n    participant App\n    participant Cache\n    participant DB\n\n    App-&gt;&gt;Cache: Get(key)\n    alt Cache Hit\n        Cache--&gt;&gt;App: Return value\n    else Cache Miss\n        Cache--&gt;&gt;App: null\n        App-&gt;&gt;DB: Query\n        DB--&gt;&gt;App: Data\n        App-&gt;&gt;Cache: Set(key, data)\n    end</code></pre>"},{"location":"daily/2024-10-24/#geographic-sharding","title":"Geographic Sharding","text":"<pre><code>graph TB\n    Router{Geographic Router}\n\n    Router --&gt;|NA Users| US[(US Shard&lt;br/&gt;North America)]\n    Router --&gt;|EU Users| EU[(EU Shard&lt;br/&gt;Europe)]\n    Router --&gt;|APAC Users| ASIA[(ASIA Shard&lt;br/&gt;Asia Pacific)]\n\n    style Router fill:#f9f,stroke:#333,stroke-width:3px\n    style US fill:#9cf\n    style EU fill:#9cf\n    style ASIA fill:#9cf</code></pre>"},{"location":"daily/2024-10-24/#event-driven-architecture","title":"Event-Driven Architecture","text":"<pre><code>sequenceDiagram\n    participant Order Service\n    participant Event Bus\n    participant Payment Service\n    participant Inventory Service\n    participant Notification Service\n\n    Order Service-&gt;&gt;Event Bus: OrderCreated Event\n    Event Bus-&gt;&gt;Payment Service: Process Payment\n    Event Bus-&gt;&gt;Inventory Service: Reserve Items\n    Event Bus-&gt;&gt;Notification Service: Send Confirmation\n\n    Payment Service-&gt;&gt;Event Bus: PaymentCompleted\n    Inventory Service-&gt;&gt;Event Bus: ItemsReserved\n    Notification Service-&gt;&gt;Event Bus: EmailSent</code></pre>"},{"location":"daily/2024-10-24/#cqrs-pattern","title":"CQRS Pattern","text":"<pre><code>graph TB\n    subgraph \"Write Side (Commands)\"\n        WC[Write Commands] --&gt; WDB[(Write DB&lt;br/&gt;Normalized)]\n        WDB --&gt; ES[Event Stream]\n    end\n\n    subgraph \"Read Side (Queries)\"\n        ES --&gt; R1[(Read Model 1&lt;br/&gt;Denormalized)]\n        ES --&gt; R2[(Read Model 2&lt;br/&gt;Cached)]\n        ES --&gt; R3[(Read Model 3&lt;br/&gt;Aggregated)]\n\n        R1 --&gt; RQ[Read Queries]\n        R2 --&gt; RQ\n        R3 --&gt; RQ\n    end\n\n    style WDB fill:#f96\n    style R1 fill:#9f9\n    style R2 fill:#9f9\n    style R3 fill:#9f9</code></pre>"},{"location":"daily/2024-10-24/#circuit-breaker-pattern","title":"Circuit Breaker Pattern","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; Closed: Normal Operation\n\n    Closed --&gt; Open: Failures exceed threshold\n    Open --&gt; HalfOpen: Timeout expires\n    HalfOpen --&gt; Closed: Success\n    HalfOpen --&gt; Open: Failure\n\n    note right of Closed\n        Allow all requests\n        Track failures\n    end note\n\n    note right of Open\n        Reject all requests\n        Return fallback\n    end note\n\n    note right of HalfOpen\n        Allow limited requests\n        Test if recovered\n    end note</code></pre>"},{"location":"daily/2024-10-24/#rate-limiting-token-bucket","title":"Rate Limiting: Token Bucket","text":"<pre><code>graph TB\n    subgraph \"Token Bucket\"\n        Bucket[Bucket&lt;br/&gt;Capacity: 100&lt;br/&gt;Current: 75]\n        Refill[Refill Rate&lt;br/&gt;10 tokens/sec]\n    end\n\n    Request1[Request 1] --&gt;|Consume token| Bucket\n    Request2[Request 2] --&gt;|Consume token| Bucket\n    Request3[Request 3] --&gt;|No tokens| Reject[429 Too Many Requests]\n\n    Refill -.-&gt;|Add tokens| Bucket\n\n    style Bucket fill:#9cf\n    style Reject fill:#f99</code></pre>"},{"location":"daily/2024-10-24/#auto-scaling","title":"Auto-Scaling","text":"<pre><code>graph TB\n    Monitor[Metrics Monitor&lt;br/&gt;CPU, Memory, QPS]\n\n    Monitor --&gt; Decision{Threshold&lt;br/&gt;Exceeded?}\n\n    Decision --&gt;|CPU &gt; 70%| ScaleUp[Scale Up&lt;br/&gt;Add 2 instances]\n    Decision --&gt;|CPU &lt; 30%| ScaleDown[Scale Down&lt;br/&gt;Remove 1 instance]\n    Decision --&gt;|Normal| Wait[Continue Monitoring]\n\n    ScaleUp --&gt; Instances[Update Instance Count]\n    ScaleDown --&gt; Instances\n    Instances --&gt; Monitor\n\n    style Decision fill:#f9f\n    style ScaleUp fill:#9f9\n    style ScaleDown fill:#fc9</code></pre>"},{"location":"daily/2024-10-24/#real-world-twitter-architecture","title":"Real-World: Twitter Architecture","text":"<pre><code>graph TB\n    subgraph \"User Actions\"\n        Post[Post Tweet]\n        Read[Read Timeline]\n    end\n\n    subgraph \"Write Path\"\n        Post --&gt; WLB[Write Load Balancer]\n        WLB --&gt; API1[API Server]\n        API1 --&gt; WDB[(Tweet DB Shard)]\n        API1 --&gt; Cache[Redis Cache]\n        API1 --&gt; MQ[Message Queue]\n        MQ --&gt; Worker[Fan-out Worker]\n        Worker --&gt; Timeline[(Timeline Cache)]\n    end\n\n    subgraph \"Read Path\"\n        Read --&gt; RLB[Read Load Balancer]\n        RLB --&gt; API2[API Server]\n        API2 --&gt; Timeline\n        Timeline -.-&gt;|Cache Miss| TDB[(Timeline DB)]\n    end\n\n    style WLB fill:#f9f\n    style RLB fill:#f9f\n    style Cache fill:#9cf\n    style Timeline fill:#9cf</code></pre>"},{"location":"daily/2024-10-24/#quick-reference-tables","title":"Quick Reference Tables","text":""},{"location":"daily/2024-10-24/#building-blocks","title":"Building Blocks","text":"Component Purpose When to Use Load Balancer Distribute traffic Multiple servers Cache Speed up reads Repeated requests Replicas Scale reads Read-heavy workload Sharding Scale writes Write-heavy workload Message Queue Async processing Time-consuming tasks CDN Serve static files Global users"},{"location":"daily/2024-10-24/#scaling-patterns-by-user-count","title":"Scaling Patterns by User Count","text":"Pattern Best For Scale Vertical Scaling Early stage &lt; 10K users Horizontal Scaling Growing traffic 10K-100K Caching Read-heavy workloads All scales Replication Read scalability 100K+ Sharding Write scalability 1M+ Microservices Large teams 100K+ Event-Driven Async workflows All scales CDN Global users All scales CQRS Complex reads 1M+ Auto-Scaling Variable traffic All scales"},{"location":"daily/2024-10-24/#resources","title":"Resources","text":"<ul> <li>MkDocs Material Theme Documentation</li> <li>System Design Primer</li> </ul>"},{"location":"daily/2024-10-24/#practice-problems","title":"Practice Problems","text":"<ul> <li>Design a URL Shortener (bit.ly)</li> <li>Design Twitter Feed</li> <li>Design Instagram</li> <li>Design Uber</li> </ul>"},{"location":"daily/2024-10-24/#reflections","title":"Reflections","text":"<p>Today was incredibly productive! Set up the learning environment and dove deep into three major system design topics. The diagram-first approach really helps visualize complex concepts. Key insight: always start simple and scale incrementally - don't over-engineer from the start.</p>"},{"location":"daily/2024-10-24/#next-steps","title":"Next Steps","text":"<ul> <li>[ ] Review FAANG system design plan in detail</li> <li>[ ] Complete URL Shortener design exercise</li> <li>[ ] Practice back-of-envelope calculations</li> <li>[ ] Study real-world case: How Netflix scaled</li> </ul> <p>\u2190 Back to Daily Logs | Home</p>"},{"location":"topics/","title":"System Design Topics","text":"<p>This section organizes system design concepts by theme for easy reference and review.</p>"},{"location":"topics/#available-guides","title":"Available Guides","text":"<ul> <li>Fundamental Building Blocks - Core components of distributed systems</li> <li>Interview Approach - How to ace FAANG system design interviews</li> <li>Scalability Patterns - Proven patterns to scale from 1K to 10M+ users</li> </ul>"},{"location":"topics/#core-concepts","title":"Core Concepts","text":""},{"location":"topics/#scalability","title":"Scalability","text":"<ul> <li>Horizontal vs Vertical Scaling</li> <li>Load Balancing</li> <li>Caching Strategies</li> <li>Content Delivery Networks (CDN)</li> </ul>"},{"location":"topics/#data-storage","title":"Data Storage","text":"<ul> <li>SQL vs NoSQL</li> <li>Database Sharding</li> <li>Replication and Partitioning</li> <li>Data Consistency Models</li> </ul>"},{"location":"topics/#system-architecture","title":"System Architecture","text":"<ul> <li>Microservices vs Monolithic</li> <li>Event-Driven Architecture</li> <li>Message Queues</li> <li>API Design (REST, GraphQL, gRPC)</li> </ul>"},{"location":"topics/#performance","title":"Performance","text":"<ul> <li>Latency vs Throughput</li> <li>Caching Layers</li> <li>Indexing Strategies</li> <li>Database Optimization</li> </ul>"},{"location":"topics/#reliability","title":"Reliability","text":"<ul> <li>High Availability</li> <li>Fault Tolerance</li> <li>Disaster Recovery</li> <li>Monitoring and Observability</li> </ul>"},{"location":"topics/#security","title":"Security","text":"<ul> <li>Authentication and Authorization</li> <li>Rate Limiting</li> <li>Data Encryption</li> <li>DDoS Protection</li> </ul>"},{"location":"topics/#common-system-design-patterns","title":"Common System Design Patterns","text":"<ul> <li>Load Balancer Pattern</li> <li>Cache-Aside Pattern</li> <li>CQRS (Command Query Responsibility Segregation)</li> <li>Event Sourcing</li> <li>Circuit Breaker</li> <li>Saga Pattern</li> <li>Database Per Service</li> </ul>"},{"location":"topics/#real-world-system-designs","title":"Real-World System Designs","text":"<p>This section will grow with case studies of popular systems</p> <ul> <li>URL Shortener (like bit.ly)</li> <li>Social Media Feed (like Twitter/X)</li> <li>Video Streaming Platform (like YouTube)</li> <li>E-commerce Platform (like Amazon)</li> <li>Ride-Sharing Service (like Uber)</li> <li>Chat Application (like WhatsApp)</li> <li>File Storage System (like Dropbox)</li> </ul> <p>\u2190 Back to Home</p>"},{"location":"topics/building-blocks/","title":"Fundamental Building Blocks of Distributed Systems","text":"<p>The core components that power large-scale systems.</p>"},{"location":"topics/building-blocks/#system-architecture-overview","title":"System Architecture Overview","text":"<pre><code>graph TB\n    subgraph \"Client Layer\"\n        C1[Web Browser]\n        C2[Mobile App]\n        C3[API Client]\n    end\n\n    subgraph \"Edge Layer\"\n        CDN[CDN]\n        LB[Load Balancer]\n    end\n\n    subgraph \"Application Layer\"\n        API1[API Server 1]\n        API2[API Server 2]\n        API3[API Server 3]\n        Cache[(Cache)]\n    end\n\n    subgraph \"Data Layer\"\n        DB1[(Primary DB)]\n        DB2[(Replica DB)]\n        MQ[Message Queue]\n    end\n\n    subgraph \"Storage Layer\"\n        S3[Object Storage]\n        FS[File System]\n    end\n\n    C1 &amp; C2 &amp; C3 --&gt; CDN\n    CDN --&gt; LB\n    LB --&gt; API1 &amp; API2 &amp; API3\n    API1 &amp; API2 &amp; API3 --&gt; Cache\n    API1 &amp; API2 &amp; API3 --&gt; DB1\n    DB1 --&gt; DB2\n    API1 &amp; API2 &amp; API3 --&gt; MQ\n    API1 &amp; API2 &amp; API3 --&gt; S3</code></pre>"},{"location":"topics/building-blocks/#1-load-balancers","title":"1. Load Balancers","text":"<p>Distribute traffic across multiple servers.</p> <pre><code>graph LR\n    Client[Client Requests] --&gt; LB{Load Balancer}\n    LB --&gt;|Round Robin| S1[Server 1]\n    LB --&gt;|Least Connections| S2[Server 2]\n    LB --&gt;|IP Hash| S3[Server 3]\n\n    style LB fill:#f9f,stroke:#333,stroke-width:4px</code></pre> <p>Key Algorithms: - Round Robin: Distribute evenly - Least Connections: Route to least busy server - IP Hash: Consistent routing per client</p>"},{"location":"topics/building-blocks/#2-caching-layers","title":"2. Caching Layers","text":"<pre><code>graph TD\n    Request[Client Request] --&gt; CDN{CDN Cache Hit?}\n    CDN --&gt;|Yes| Return1[Return Data]\n    CDN --&gt;|No| AppCache{App Cache Hit?}\n    AppCache --&gt;|Yes| Return2[Return Data]\n    AppCache --&gt;|No| DB[(Database)]\n    DB --&gt; AppCache\n    AppCache --&gt; CDN\n\n    style CDN fill:#9cf\n    style AppCache fill:#9cf</code></pre> <p>Cache Levels: - CDN: Static assets (images, CSS, JS) - Application: Session data, API responses - Database: Query results</p>"},{"location":"topics/building-blocks/#3-database-patterns","title":"3. Database Patterns","text":""},{"location":"topics/building-blocks/#master-replica-replication","title":"Master-Replica Replication","text":"<pre><code>graph TB\n    App[Application Servers]\n    App --&gt;|Write| Master[(Master DB)]\n    App --&gt;|Read| R1[(Replica 1)]\n    App --&gt;|Read| R2[(Replica 2)]\n    App --&gt;|Read| R3[(Replica 3)]\n\n    Master -.-&gt;|Replicate| R1\n    Master -.-&gt;|Replicate| R2\n    Master -.-&gt;|Replicate| R3\n\n    style Master fill:#f96,stroke:#333,stroke-width:3px\n    style R1 fill:#9f9\n    style R2 fill:#9f9\n    style R3 fill:#9f9</code></pre>"},{"location":"topics/building-blocks/#database-sharding","title":"Database Sharding","text":"<pre><code>graph TB\n    App[Application] --&gt; Router{Shard Router}\n\n    Router --&gt;|Users A-M| S1[(Shard 1&lt;br/&gt;A-M)]\n    Router --&gt;|Users N-Z| S2[(Shard 2&lt;br/&gt;N-Z)]\n    Router --&gt;|Users 0-9| S3[(Shard 3&lt;br/&gt;0-9)]\n\n    style Router fill:#ff9,stroke:#333,stroke-width:3px</code></pre> <p>Sharding Strategies: - Range-based (A-M, N-Z) - Hash-based (user_id % num_shards) - Geographic (US, EU, ASIA)</p>"},{"location":"topics/building-blocks/#4-message-queues","title":"4. Message Queues","text":"<p>Asynchronous processing and decoupling.</p> <pre><code>sequenceDiagram\n    participant Client\n    participant API\n    participant Queue\n    participant Worker\n    participant DB\n\n    Client-&gt;&gt;API: Upload Video\n    API-&gt;&gt;Queue: Add to processing queue\n    API--&gt;&gt;Client: 202 Accepted (Job ID)\n\n    Worker-&gt;&gt;Queue: Poll for jobs\n    Queue--&gt;&gt;Worker: Video processing task\n    Worker-&gt;&gt;Worker: Transcode video\n    Worker-&gt;&gt;DB: Update status\n    Worker-&gt;&gt;Client: Webhook notification</code></pre> <p>Use Cases: - Video/image processing - Email delivery - Report generation - Background tasks</p>"},{"location":"topics/building-blocks/#5-microservices-communication","title":"5. Microservices Communication","text":"<pre><code>graph TB\n    Gateway[API Gateway]\n\n    Gateway --&gt; Auth[Auth Service]\n    Gateway --&gt; User[User Service]\n    Gateway --&gt; Order[Order Service]\n    Gateway --&gt; Payment[Payment Service]\n\n    Order --&gt; MQ[Message Queue]\n    Payment --&gt; MQ\n\n    Auth --&gt; AuthDB[(Auth DB)]\n    User --&gt; UserDB[(User DB)]\n    Order --&gt; OrderDB[(Order DB)]\n    Payment --&gt; PayDB[(Payment DB)]\n\n    style Gateway fill:#f9f,stroke:#333,stroke-width:3px</code></pre> <p>Key Patterns: - API Gateway: Single entry point - Service Discovery: Find service instances - Circuit Breaker: Handle failures gracefully</p>"},{"location":"topics/building-blocks/#6-cdn-content-delivery-network","title":"6. CDN (Content Delivery Network)","text":"<pre><code>graph TB\n    User1[User in US] --&gt; CDN_US[CDN Edge&lt;br/&gt;US East]\n    User2[User in EU] --&gt; CDN_EU[CDN Edge&lt;br/&gt;EU West]\n    User3[User in Asia] --&gt; CDN_ASIA[CDN Edge&lt;br/&gt;Singapore]\n\n    CDN_US -.-&gt;|Cache Miss| Origin[Origin Server]\n    CDN_EU -.-&gt;|Cache Miss| Origin\n    CDN_ASIA -.-&gt;|Cache Miss| Origin\n\n    Origin --&gt; S3[(Object Storage)]\n\n    style Origin fill:#f96\n    style CDN_US fill:#9cf\n    style CDN_EU fill:#9cf\n    style CDN_ASIA fill:#9cf</code></pre> <p>Benefits: - Reduced latency (serve from nearby edge) - Reduced load on origin servers - DDoS protection</p>"},{"location":"topics/building-blocks/#7-data-flow-example-social-media-post","title":"7. Data Flow Example: Social Media Post","text":"<pre><code>sequenceDiagram\n    participant User\n    participant LB as Load Balancer\n    participant API as API Server\n    participant Cache\n    participant DB as Database\n    participant Queue as Message Queue\n    participant Worker\n\n    User-&gt;&gt;LB: POST /create-post\n    LB-&gt;&gt;API: Route request\n    API-&gt;&gt;DB: Save post\n    DB--&gt;&gt;API: Post saved (ID: 123)\n\n    API-&gt;&gt;Cache: Invalidate user feed cache\n    API-&gt;&gt;Queue: Notify followers\n    API--&gt;&gt;User: 201 Created\n\n    Worker-&gt;&gt;Queue: Poll notifications\n    Queue--&gt;&gt;Worker: Fan out to followers\n    Worker-&gt;&gt;DB: Update follower feeds</code></pre>"},{"location":"topics/building-blocks/#key-takeaways","title":"Key Takeaways","text":"Component Purpose When to Use Load Balancer Distribute traffic Multiple servers Cache Speed up reads Repeated requests Replicas Scale reads Read-heavy workload Sharding Scale writes Write-heavy workload Message Queue Async processing Time-consuming tasks CDN Serve static files Global users <p>\u2190 Back to Topics | Home</p>"},{"location":"topics/interview-approach/","title":"System Design Interview Approach","text":"<p>How FAANG companies evaluate system design skills.</p>"},{"location":"topics/interview-approach/#interview-flow","title":"Interview Flow","text":"<pre><code>graph LR\n    A[Clarify Requirements&lt;br/&gt;5-10 min] --&gt; B[High-Level Design&lt;br/&gt;10-15 min]\n    B --&gt; C[Deep Dive&lt;br/&gt;15-20 min]\n    C --&gt; D[Bottlenecks &amp; Trade-offs&lt;br/&gt;5-10 min]\n\n    style A fill:#9cf\n    style B fill:#9f9\n    style C fill:#ff9\n    style D fill:#f9c</code></pre>"},{"location":"topics/interview-approach/#step-1-requirements-clarification","title":"Step 1: Requirements Clarification","text":"<pre><code>mindmap\n  root((Requirements))\n    Functional\n      Core features?\n      User actions?\n      API endpoints?\n    Non-Functional\n      Scale (Users/QPS)?\n      Latency targets?\n      Consistency needs?\n    Constraints\n      Budget?\n      Technology stack?\n      Timeline?</code></pre> <p>Key Questions to Ask: - How many users? (DAU/MAU) - Read vs Write ratio? - Peak traffic patterns? - Data retention period? - Geographic distribution?</p>"},{"location":"topics/interview-approach/#step-2-capacity-estimation","title":"Step 2: Capacity Estimation","text":"<pre><code>graph TB\n    Start[Requirements] --&gt; Users[Users&lt;br/&gt;100M DAU]\n    Users --&gt; Requests[Requests&lt;br/&gt;10 actions/user/day]\n    Requests --&gt; QPS[QPS Calculation&lt;br/&gt;100M \u00d7 10 / 86400]\n    QPS --&gt; Result[~12K QPS&lt;br/&gt;Peak: 36K QPS]\n\n    Start --&gt; Data[Data Volume]\n    Data --&gt; Storage[Storage Calc&lt;br/&gt;1KB per action]\n    Storage --&gt; Total[Daily: ~1TB&lt;br/&gt;Yearly: ~365TB]\n\n    style Result fill:#9f9\n    style Total fill:#9f9</code></pre> <p>Back-of-envelope Math: - QPS = (DAU \u00d7 actions) / 86,400 - Peak QPS = Average QPS \u00d7 3 - Storage = QPS \u00d7 data_size \u00d7 seconds_per_day</p>"},{"location":"topics/interview-approach/#step-3-api-design","title":"Step 3: API Design","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant API Gateway\n    participant Service\n\n    Note over Client,Service: POST /api/v1/posts\n    Client-&gt;&gt;API Gateway: Create Post\n    API Gateway-&gt;&gt;Service: Forward request\n    Service--&gt;&gt;API Gateway: 201 Created {id: 123}\n    API Gateway--&gt;&gt;Client: Response\n\n    Note over Client,Service: GET /api/v1/feed?user_id=456\n    Client-&gt;&gt;API Gateway: Get Feed\n    API Gateway-&gt;&gt;Service: Forward request\n    Service--&gt;&gt;API Gateway: 200 OK {posts: [...]}\n    API Gateway--&gt;&gt;Client: Response</code></pre> <p>Define Key APIs Early: - <code>POST /posts</code> - Create content - <code>GET /feed</code> - Retrieve content - <code>PUT /posts/:id</code> - Update content - <code>DELETE /posts/:id</code> - Remove content</p>"},{"location":"topics/interview-approach/#step-4-high-level-design","title":"Step 4: High-Level Design","text":"<pre><code>graph TB\n    Client[Clients] --&gt; DNS[DNS]\n    DNS --&gt; CDN[CDN]\n    CDN --&gt; LB[Load Balancer]\n\n    LB --&gt; API1[API Server]\n    LB --&gt; API2[API Server]\n\n    API1 &amp; API2 --&gt; Cache[(Redis Cache)]\n    API1 &amp; API2 --&gt; DB[(Primary DB)]\n\n    DB --&gt; Replica1[(Replica)]\n    DB --&gt; Replica2[(Replica)]\n\n    API1 &amp; API2 --&gt; Queue[Message Queue]\n    Queue --&gt; Worker1[Worker]\n    Queue --&gt; Worker2[Worker]\n\n    Worker1 &amp; Worker2 --&gt; Storage[(Object Storage)]\n\n    style LB fill:#f9f\n    style Cache fill:#9cf\n    style Queue fill:#ff9</code></pre> <p>Start Simple, Then Iterate: 1. Client \u2192 Server \u2192 Database 2. Add load balancer (multiple servers) 3. Add caching layer 4. Add database replicas 5. Add message queues for async tasks</p>"},{"location":"topics/interview-approach/#step-5-deep-dive-areas","title":"Step 5: Deep Dive Areas","text":"<pre><code>mindmap\n  root((Deep Dive&lt;br/&gt;Topics))\n    Scalability\n      Horizontal scaling\n      Database sharding\n      Caching strategy\n    Performance\n      Query optimization\n      Index design\n      CDN usage\n    Reliability\n      Failover handling\n      Data replication\n      Backup strategy\n    Security\n      Authentication\n      Rate limiting\n      Data encryption</code></pre> <p>Interviewer May Ask: - \"How do you handle 10x traffic?\" - \"What if the cache fails?\" - \"How do you ensure consistency?\" - \"What about data privacy?\"</p>"},{"location":"topics/interview-approach/#step-6-bottleneck-analysis","title":"Step 6: Bottleneck Analysis","text":"<pre><code>graph TB\n    subgraph \"Identify Bottlenecks\"\n        B1[Database writes&lt;br/&gt;Too slow?]\n        B2[Memory cache&lt;br/&gt;Insufficient?]\n        B3[Single point&lt;br/&gt;of failure?]\n        B4[Network&lt;br/&gt;bandwidth?]\n    end\n\n    subgraph \"Solutions\"\n        S1[Add write sharding&lt;br/&gt;Message queue]\n        S2[Scale cache tier&lt;br/&gt;Multiple Redis clusters]\n        S3[Add redundancy&lt;br/&gt;Multi-region deployment]\n        S4[Use CDN&lt;br/&gt;Compress data]\n    end\n\n    B1 --&gt; S1\n    B2 --&gt; S2\n    B3 --&gt; S3\n    B4 --&gt; S4\n\n    style B1 fill:#f99\n    style B2 fill:#f99\n    style B3 fill:#f99\n    style B4 fill:#f99\n    style S1 fill:#9f9\n    style S2 fill:#9f9\n    style S3 fill:#9f9\n    style S4 fill:#9f9</code></pre>"},{"location":"topics/interview-approach/#trade-offs-discussion","title":"Trade-offs Discussion","text":"<pre><code>graph LR\n    subgraph \"Consistency vs Availability\"\n        C1[Strong Consistency&lt;br/&gt;SQL, ACID]\n        C2[Eventual Consistency&lt;br/&gt;NoSQL, BASE]\n    end\n\n    subgraph \"Latency vs Accuracy\"\n        L1[Real-time&lt;br/&gt;Approximate counts]\n        L2[Batch Processing&lt;br/&gt;Exact counts]\n    end\n\n    subgraph \"Cost vs Performance\"\n        P1[Premium Tier&lt;br/&gt;Low latency]\n        P2[Standard Tier&lt;br/&gt;Higher latency]\n    end\n\n    style C1 fill:#9cf\n    style C2 fill:#fc9\n    style L1 fill:#9cf\n    style L2 fill:#fc9\n    style P1 fill:#9cf\n    style P2 fill:#fc9</code></pre> <p>Common Trade-offs: - CAP Theorem: Consistency vs Availability vs Partition Tolerance - Latency vs Consistency: Fast reads vs accurate data - Storage vs Compute: Denormalization vs joins - Cost vs Performance: Premium infrastructure vs budget constraints</p>"},{"location":"topics/interview-approach/#evaluation-criteria","title":"Evaluation Criteria","text":"<pre><code>graph TB\n    Score[Interview Score]\n\n    Score --&gt; C1[Clarity of Thought&lt;br/&gt;30%]\n    Score --&gt; C2[Technical Depth&lt;br/&gt;30%]\n    Score --&gt; C3[Trade-off Analysis&lt;br/&gt;20%]\n    Score --&gt; C4[Communication&lt;br/&gt;20%]\n\n    C1 --&gt; R1[Clear requirements&lt;br/&gt;Structured approach]\n    C2 --&gt; R2[Component knowledge&lt;br/&gt;Scalability solutions]\n    C3 --&gt; R3[Pros/cons discussion&lt;br/&gt;Alternative approaches]\n    C4 --&gt; R4[Explain clearly&lt;br/&gt;Ask good questions]\n\n    style Score fill:#f9f,stroke:#333,stroke-width:4px</code></pre>"},{"location":"topics/interview-approach/#common-mistakes-to-avoid","title":"Common Mistakes to Avoid","text":"<pre><code>graph TD\n    M1[\u274c Jumping to solution&lt;br/&gt;without clarifying]\n    M2[\u274c Over-engineering&lt;br/&gt;from the start]\n    M3[\u274c Ignoring constraints&lt;br/&gt;and scale]\n    M4[\u274c Not discussing&lt;br/&gt;trade-offs]\n    M5[\u274c Poor time&lt;br/&gt;management]\n\n    M1 --&gt; F1[\u2705 Ask questions first]\n    M2 --&gt; F2[\u2705 Start simple]\n    M3 --&gt; F3[\u2705 Calculate capacity]\n    M4 --&gt; F4[\u2705 Explain alternatives]\n    M5 --&gt; F5[\u2705 Watch the clock]\n\n    style M1 fill:#f99\n    style M2 fill:#f99\n    style M3 fill:#f99\n    style M4 fill:#f99\n    style M5 fill:#f99\n    style F1 fill:#9f9\n    style F2 fill:#9f9\n    style F3 fill:#9f9\n    style F4 fill:#9f9\n    style F5 fill:#9f9</code></pre>"},{"location":"topics/interview-approach/#interview-time-management","title":"Interview Time Management","text":"<pre><code>gantt\n    title 45-Minute System Design Interview\n    dateFormat mm:ss\n    axisFormat %M:%S\n\n    section Phase 1\n    Requirements &amp; Clarification :00:00, 10m\n\n    section Phase 2\n    High-Level Design :10:00, 15m\n\n    section Phase 3\n    Deep Dive Components :25:00, 12m\n\n    section Phase 4\n    Bottlenecks &amp; Wrap-up :37:00, 8m</code></pre>"},{"location":"topics/interview-approach/#practice-problems-by-difficulty","title":"Practice Problems by Difficulty","text":"<pre><code>graph TB\n    subgraph Easy\n        E1[URL Shortener]\n        E2[Pastebin]\n        E3[Key-Value Store]\n    end\n\n    subgraph Medium\n        M1[Twitter Feed]\n        M2[Instagram]\n        M3[Uber]\n    end\n\n    subgraph Hard\n        H1[Google Search]\n        H2[Netflix]\n        H3[WhatsApp]\n    end\n\n    Easy --&gt; Medium --&gt; Hard\n\n    style Easy fill:#9f9\n    style Medium fill:#ff9\n    style Hard fill:#f99</code></pre>"},{"location":"topics/interview-approach/#key-takeaways","title":"Key Takeaways","text":"<ol> <li>Always clarify first - Don't assume requirements</li> <li>Start simple - Build incrementally</li> <li>Numbers matter - Do back-of-envelope calculations</li> <li>Think out loud - Communicate your reasoning</li> <li>Discuss trade-offs - There's no perfect solution</li> <li>Practice regularly - Muscle memory is key</li> </ol> <p>\u2190 Back to Topics | Home</p>"},{"location":"topics/scalability-patterns/","title":"Common Scalability Patterns","text":"<p>Proven approaches to scale systems from thousands to millions of users.</p>"},{"location":"topics/scalability-patterns/#scaling-journey-overview","title":"Scaling Journey Overview","text":"<pre><code>graph LR\n    S1[1K Users&lt;br/&gt;Single Server] --&gt; S2[10K Users&lt;br/&gt;Add Cache + DB]\n    S2 --&gt; S3[100K Users&lt;br/&gt;Load Balancer&lt;br/&gt;+ Replicas]\n    S3 --&gt; S4[1M Users&lt;br/&gt;Sharding&lt;br/&gt;+ CDN]\n    S4 --&gt; S5[10M+ Users&lt;br/&gt;Microservices&lt;br/&gt;+ Multi-region]\n\n    style S1 fill:#9f9\n    style S2 fill:#9cf\n    style S3 fill:#ff9\n    style S4 fill:#f9c\n    style S5 fill:#f9f</code></pre>"},{"location":"topics/scalability-patterns/#pattern-1-vertical-scaling-scale-up","title":"Pattern 1: Vertical Scaling (Scale Up)","text":"<pre><code>graph TB\n    subgraph \"Before: Small Server\"\n        B1[4 CPU cores&lt;br/&gt;8 GB RAM&lt;br/&gt;100 GB SSD]\n    end\n\n    subgraph \"After: Bigger Server\"\n        A1[16 CPU cores&lt;br/&gt;64 GB RAM&lt;br/&gt;1 TB SSD]\n    end\n\n    B1 -.-&gt;|Upgrade| A1\n\n    style B1 fill:#ff9\n    style A1 fill:#9f9</code></pre> <p>Pros: Simple, no code changes Cons: Hardware limits, single point of failure, expensive Use When: Early stage, quick fix needed</p>"},{"location":"topics/scalability-patterns/#pattern-2-horizontal-scaling-scale-out","title":"Pattern 2: Horizontal Scaling (Scale Out)","text":"<pre><code>graph TB\n    LB[Load Balancer]\n\n    LB --&gt; S1[Server 1&lt;br/&gt;4 cores, 8GB]\n    LB --&gt; S2[Server 2&lt;br/&gt;4 cores, 8GB]\n    LB --&gt; S3[Server 3&lt;br/&gt;4 cores, 8GB]\n    LB --&gt; S4[Server 4&lt;br/&gt;4 cores, 8GB]\n\n    style LB fill:#f9f,stroke:#333,stroke-width:3px\n    style S1 fill:#9f9\n    style S2 fill:#9f9\n    style S3 fill:#9f9\n    style S4 fill:#9f9</code></pre> <p>Pros: No limits, redundancy, cost-effective Cons: Complexity, stateless requirements Use When: Growth expected, high availability needed</p>"},{"location":"topics/scalability-patterns/#pattern-3-caching-strategy","title":"Pattern 3: Caching Strategy","text":""},{"location":"topics/scalability-patterns/#cache-aside-pattern","title":"Cache Aside Pattern","text":"<pre><code>sequenceDiagram\n    participant App\n    participant Cache\n    participant DB\n\n    App-&gt;&gt;Cache: Get(key)\n    alt Cache Hit\n        Cache--&gt;&gt;App: Return value\n    else Cache Miss\n        Cache--&gt;&gt;App: null\n        App-&gt;&gt;DB: Query\n        DB--&gt;&gt;App: Data\n        App-&gt;&gt;Cache: Set(key, data)\n    end</code></pre>"},{"location":"topics/scalability-patterns/#write-through-cache","title":"Write-Through Cache","text":"<pre><code>sequenceDiagram\n    participant App\n    participant Cache\n    participant DB\n\n    App-&gt;&gt;Cache: Write(key, value)\n    Cache-&gt;&gt;DB: Write to DB\n    DB--&gt;&gt;Cache: Ack\n    Cache--&gt;&gt;App: Success</code></pre>"},{"location":"topics/scalability-patterns/#cache-layers","title":"Cache Layers","text":"<pre><code>graph TB\n    Request[Request] --&gt; L1{Browser Cache}\n    L1 --&gt;|Miss| L2{CDN Cache}\n    L2 --&gt;|Miss| L3{Server Cache&lt;br/&gt;Redis/Memcached}\n    L3 --&gt;|Miss| L4{DB Query Cache}\n    L4 --&gt;|Miss| DB[(Database)]\n\n    style L1 fill:#9cf\n    style L2 fill:#9cf\n    style L3 fill:#9cf\n    style L4 fill:#9cf</code></pre>"},{"location":"topics/scalability-patterns/#pattern-4-database-replication","title":"Pattern 4: Database Replication","text":""},{"location":"topics/scalability-patterns/#master-slave-replication","title":"Master-Slave Replication","text":"<pre><code>graph TB\n    App[Application]\n\n    App --&gt;|Writes| M[(Master)]\n    App --&gt;|Reads| R1[(Slave 1)]\n    App --&gt;|Reads| R2[(Slave 2)]\n    App --&gt;|Reads| R3[(Slave 3)]\n\n    M -.-&gt;|Async Replication| R1\n    M -.-&gt;|Async Replication| R2\n    M -.-&gt;|Async Replication| R3\n\n    style M fill:#f96,stroke:#333,stroke-width:3px\n    style R1 fill:#9f9\n    style R2 fill:#9f9\n    style R3 fill:#9f9</code></pre> <p>Read/Write Split: - Master: Handle all writes - Slaves: Handle read queries - Ratio: Often 90% reads, 10% writes</p>"},{"location":"topics/scalability-patterns/#pattern-5-database-sharding","title":"Pattern 5: Database Sharding","text":""},{"location":"topics/scalability-patterns/#horizontal-partitioning","title":"Horizontal Partitioning","text":"<pre><code>graph TB\n    Router{Shard Router&lt;br/&gt;Hash user_id}\n\n    Router --&gt;|user_id % 4 = 0| S0[(Shard 0&lt;br/&gt;Users 0,4,8...)]\n    Router --&gt;|user_id % 4 = 1| S1[(Shard 1&lt;br/&gt;Users 1,5,9...)]\n    Router --&gt;|user_id % 4 = 2| S2[(Shard 2&lt;br/&gt;Users 2,6,10...)]\n    Router --&gt;|user_id % 4 = 3| S3[(Shard 3&lt;br/&gt;Users 3,7,11...)]\n\n    style Router fill:#f9f,stroke:#333,stroke-width:3px</code></pre>"},{"location":"topics/scalability-patterns/#geographic-sharding","title":"Geographic Sharding","text":"<pre><code>graph TB\n    Router{Geographic Router}\n\n    Router --&gt;|NA Users| US[(US Shard&lt;br/&gt;North America)]\n    Router --&gt;|EU Users| EU[(EU Shard&lt;br/&gt;Europe)]\n    Router --&gt;|APAC Users| ASIA[(ASIA Shard&lt;br/&gt;Asia Pacific)]\n\n    style Router fill:#f9f,stroke:#333,stroke-width:3px\n    style US fill:#9cf\n    style EU fill:#9cf\n    style ASIA fill:#9cf</code></pre>"},{"location":"topics/scalability-patterns/#pattern-6-microservices-decomposition","title":"Pattern 6: Microservices Decomposition","text":""},{"location":"topics/scalability-patterns/#monolith-vs-microservices","title":"Monolith vs Microservices","text":"<pre><code>graph TB\n    subgraph \"Monolith\"\n        M[Single Application&lt;br/&gt;User + Order + Payment&lt;br/&gt;+ Inventory]\n        M --&gt; MDB[(Single DB)]\n    end\n\n    subgraph \"Microservices\"\n        GW[API Gateway]\n        GW --&gt; US[User Service]\n        GW --&gt; OS[Order Service]\n        GW --&gt; PS[Payment Service]\n        GW --&gt; IS[Inventory Service]\n\n        US --&gt; UD[(User DB)]\n        OS --&gt; OD[(Order DB)]\n        PS --&gt; PD[(Payment DB)]\n        IS --&gt; ID[(Inventory DB)]\n    end\n\n    style M fill:#f99\n    style GW fill:#9f9</code></pre> <p>When to Use Microservices: - Large team (&gt;50 engineers) - Independent scaling needs - Different technology stacks - Domain complexity</p>"},{"location":"topics/scalability-patterns/#pattern-7-event-driven-architecture","title":"Pattern 7: Event-Driven Architecture","text":"<pre><code>sequenceDiagram\n    participant Order Service\n    participant Event Bus\n    participant Payment Service\n    participant Inventory Service\n    participant Notification Service\n\n    Order Service-&gt;&gt;Event Bus: OrderCreated Event\n    Event Bus-&gt;&gt;Payment Service: Process Payment\n    Event Bus-&gt;&gt;Inventory Service: Reserve Items\n    Event Bus-&gt;&gt;Notification Service: Send Confirmation\n\n    Payment Service-&gt;&gt;Event Bus: PaymentCompleted\n    Inventory Service-&gt;&gt;Event Bus: ItemsReserved\n    Notification Service-&gt;&gt;Event Bus: EmailSent</code></pre> <p>Benefits: - Loose coupling - Async processing - Easy to add new consumers - Event replay capability</p>"},{"location":"topics/scalability-patterns/#pattern-8-cqrs-command-query-responsibility-segregation","title":"Pattern 8: CQRS (Command Query Responsibility Segregation)","text":"<pre><code>graph TB\n    subgraph \"Write Side (Commands)\"\n        WC[Write Commands] --&gt; WDB[(Write DB&lt;br/&gt;Normalized)]\n        WDB --&gt; ES[Event Stream]\n    end\n\n    subgraph \"Read Side (Queries)\"\n        ES --&gt; R1[(Read Model 1&lt;br/&gt;Denormalized)]\n        ES --&gt; R2[(Read Model 2&lt;br/&gt;Cached)]\n        ES --&gt; R3[(Read Model 3&lt;br/&gt;Aggregated)]\n\n        R1 --&gt; RQ[Read Queries]\n        R2 --&gt; RQ\n        R3 --&gt; RQ\n    end\n\n    style WDB fill:#f96\n    style R1 fill:#9f9\n    style R2 fill:#9f9\n    style R3 fill:#9f9</code></pre> <p>Use Cases: - Different read/write patterns - Complex queries needed - High read throughput - Reporting requirements</p>"},{"location":"topics/scalability-patterns/#pattern-9-circuit-breaker","title":"Pattern 9: Circuit Breaker","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; Closed: Normal Operation\n\n    Closed --&gt; Open: Failures exceed threshold\n    Open --&gt; HalfOpen: Timeout expires\n    HalfOpen --&gt; Closed: Success\n    HalfOpen --&gt; Open: Failure\n\n    note right of Closed\n        Allow all requests\n        Track failures\n    end note\n\n    note right of Open\n        Reject all requests\n        Return fallback\n    end note\n\n    note right of HalfOpen\n        Allow limited requests\n        Test if recovered\n    end note</code></pre> <p>Example Flow:</p> <pre><code>sequenceDiagram\n    participant Service A\n    participant Circuit Breaker\n    participant Service B\n\n    Service A-&gt;&gt;Circuit Breaker: Request\n    alt Circuit Closed\n        Circuit Breaker-&gt;&gt;Service B: Forward request\n        Service B--&gt;&gt;Circuit Breaker: Response\n        Circuit Breaker--&gt;&gt;Service A: Response\n    else Circuit Open\n        Circuit Breaker--&gt;&gt;Service A: Fail fast (cached/default)\n    end</code></pre>"},{"location":"topics/scalability-patterns/#pattern-10-rate-limiting","title":"Pattern 10: Rate Limiting","text":""},{"location":"topics/scalability-patterns/#token-bucket-algorithm","title":"Token Bucket Algorithm","text":"<pre><code>graph TB\n    subgraph \"Token Bucket\"\n        Bucket[Bucket&lt;br/&gt;Capacity: 100&lt;br/&gt;Current: 75]\n        Refill[Refill Rate&lt;br/&gt;10 tokens/sec]\n    end\n\n    Request1[Request 1] --&gt;|Consume token| Bucket\n    Request2[Request 2] --&gt;|Consume token| Bucket\n    Request3[Request 3] --&gt;|No tokens| Reject[429 Too Many Requests]\n\n    Refill -.-&gt;|Add tokens| Bucket\n\n    style Bucket fill:#9cf\n    style Reject fill:#f99</code></pre>"},{"location":"topics/scalability-patterns/#sliding-window","title":"Sliding Window","text":"<pre><code>gantt\n    title Rate Limit: 100 requests per minute\n    dateFormat ss\n    axisFormat %S\n\n    section Window 1\n    Requests (80) :00, 30s\n\n    section Window 2\n    Requests (50) :30, 30s\n\n    section Current\n    Allowed? 80*0.5 + 50 = 90 &lt; 100 \u2705 :done, 30, 1s</code></pre>"},{"location":"topics/scalability-patterns/#pattern-11-cdn-edge-computing","title":"Pattern 11: CDN &amp; Edge Computing","text":"<pre><code>graph TB\n    subgraph \"Global Distribution\"\n        User1[User&lt;br/&gt;San Francisco] --&gt; Edge1[Edge Server&lt;br/&gt;US-West]\n        User2[User&lt;br/&gt;London] --&gt; Edge2[Edge Server&lt;br/&gt;EU-West]\n        User3[User&lt;br/&gt;Tokyo] --&gt; Edge3[Edge Server&lt;br/&gt;APAC]\n    end\n\n    Edge1 &amp; Edge2 &amp; Edge3 -.-&gt;|Cache Miss| Origin[Origin Server&lt;br/&gt;US-East]\n\n    Origin --&gt; S3[(Object Storage)]\n\n    style Edge1 fill:#9cf\n    style Edge2 fill:#9cf\n    style Edge3 fill:#9cf\n    style Origin fill:#f96</code></pre> <p>Edge Caching Strategy: - Static assets: Cache 30 days - API responses: Cache 5-60 minutes - Dynamic content: Cache 0-5 minutes</p>"},{"location":"topics/scalability-patterns/#pattern-12-auto-scaling","title":"Pattern 12: Auto-Scaling","text":"<pre><code>graph TB\n    Monitor[Metrics Monitor&lt;br/&gt;CPU, Memory, QPS]\n\n    Monitor --&gt; Decision{Threshold&lt;br/&gt;Exceeded?}\n\n    Decision --&gt;|CPU &gt; 70%| ScaleUp[Scale Up&lt;br/&gt;Add 2 instances]\n    Decision --&gt;|CPU &lt; 30%| ScaleDown[Scale Down&lt;br/&gt;Remove 1 instance]\n    Decision --&gt;|Normal| Wait[Continue Monitoring]\n\n    ScaleUp --&gt; Instances[Update Instance Count]\n    ScaleDown --&gt; Instances\n    Instances --&gt; Monitor\n\n    style Decision fill:#f9f\n    style ScaleUp fill:#9f9\n    style ScaleDown fill:#fc9</code></pre> <p>Scaling Triggers: - CPU utilization &gt; 70% - Memory usage &gt; 80% - Request queue length &gt; 100 - Custom metrics (e.g., order rate)</p>"},{"location":"topics/scalability-patterns/#scaling-comparison-matrix","title":"Scaling Comparison Matrix","text":"<pre><code>graph TB\n    subgraph \"Scaling Approach Selection\"\n        Start{Current Scale}\n\n        Start --&gt;|&lt; 10K users| V[Vertical Scaling&lt;br/&gt;+ Basic Caching]\n        Start --&gt;|10K-100K| H[Horizontal Scaling&lt;br/&gt;+ DB Replicas&lt;br/&gt;+ CDN]\n        Start --&gt;|100K-1M| S[Sharding&lt;br/&gt;+ Microservices&lt;br/&gt;+ Message Queues]\n        Start --&gt;|&gt; 1M| D[Multi-Region&lt;br/&gt;+ Edge Computing&lt;br/&gt;+ Auto-Scaling]\n    end\n\n    style V fill:#9f9\n    style H fill:#9cf\n    style S fill:#ff9\n    style D fill:#f9c</code></pre>"},{"location":"topics/scalability-patterns/#real-world-example-scaling-twitter","title":"Real-World Example: Scaling Twitter","text":"<pre><code>graph TB\n    subgraph \"User Actions\"\n        Post[Post Tweet]\n        Read[Read Timeline]\n    end\n\n    subgraph \"Write Path\"\n        Post --&gt; WLB[Write Load Balancer]\n        WLB --&gt; API1[API Server]\n        API1 --&gt; WDB[(Tweet DB Shard)]\n        API1 --&gt; Cache[Redis Cache]\n        API1 --&gt; MQ[Message Queue]\n        MQ --&gt; Worker[Fan-out Worker]\n        Worker --&gt; Timeline[(Timeline Cache)]\n    end\n\n    subgraph \"Read Path\"\n        Read --&gt; RLB[Read Load Balancer]\n        RLB --&gt; API2[API Server]\n        API2 --&gt; Timeline\n        Timeline -.-&gt;|Cache Miss| TDB[(Timeline DB)]\n    end\n\n    style WLB fill:#f9f\n    style RLB fill:#f9f\n    style Cache fill:#9cf\n    style Timeline fill:#9cf</code></pre> <p>Key Techniques: - Write: Fan-out on write (pre-compute timelines) - Read: Serve from cache (Redis) - Sharding: By user_id hash - Celebrities: Hybrid fan-out (fetch on read)</p>"},{"location":"topics/scalability-patterns/#key-takeaways","title":"Key Takeaways","text":"Pattern Best For Scale Vertical Scaling Early stage, quick wins &lt; 10K users Horizontal Scaling Growing traffic 10K-100K Caching Read-heavy workloads All scales Replication Read scalability 100K+ Sharding Write scalability 1M+ Microservices Large teams, complex domains 100K+ Event-Driven Async workflows All scales CDN Global users, static content All scales CQRS Complex read patterns 1M+ Auto-Scaling Variable traffic All scales <p>\u2190 Back to Topics | Home</p>"}]}