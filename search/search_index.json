{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"System Design Journey","text":"<p>Welcome to my system design learning journey! This site documents my daily exploration of FAANG-level system design concepts and patterns.</p>"},{"location":"#about-this-journey","title":"About This Journey","text":"<p>I'm following a structured system design plan to build expertise in designing scalable, distributed systems. This site serves as:</p> <ul> <li>Daily Learning Log: Track progress and insights from each study session</li> <li>Knowledge Repository: Organize system design concepts and patterns</li> <li>Reference Guide: Quick access to important topics and resources</li> </ul>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Daily Logs - Day-by-day learning entries</li> <li>Topics - System design concepts organized by theme</li> <li>Resources - Useful links and references</li> </ul>"},{"location":"#current-focus","title":"Current Focus","text":"<p>Check out the Daily Logs section to see what I'm currently learning.</p>"},{"location":"#progress-tracking","title":"Progress Tracking","text":"<p>This journey is structured to cover:</p> <ul> <li>Fundamental system design concepts</li> <li>Scalability and performance optimization</li> <li>Database design and data modeling</li> <li>Distributed systems patterns</li> <li>Real-world system design case studies</li> <li>FAANG-style interview preparation</li> </ul> <p>Last updated: {{ git_revision_date }}</p>"},{"location":"about/","title":"About","text":""},{"location":"about/#about-this-project","title":"About This Project","text":"<p>This site documents my journey learning system design concepts, with a focus on preparing for FAANG-level technical interviews and building production-ready systems.</p>"},{"location":"about/#learning-approach","title":"Learning Approach","text":"<p>I'm following a structured daily plan that covers:</p> <ol> <li>Fundamental Concepts: Building a solid foundation in distributed systems</li> <li>Practical Application: Applying concepts to real-world scenarios</li> <li>Case Studies: Analyzing existing large-scale systems</li> <li>Practice: Regular design exercises and mock interviews</li> </ol>"},{"location":"about/#goals","title":"Goals","text":"<ul> <li>Master core system design principles</li> <li>Understand trade-offs in architectural decisions</li> <li>Build confidence in FAANG-level system design interviews</li> <li>Create a comprehensive reference guide for future use</li> </ul>"},{"location":"about/#site-structure","title":"Site Structure","text":"<p>This site is built using:</p> <ul> <li>MkDocs with Material theme</li> <li>GitHub Pages for hosting</li> <li>Markdown for content</li> <li>Mermaid for diagrams</li> </ul>"},{"location":"about/#contact","title":"Contact","text":"<p>Feel free to reach out or follow my journey:</p> <ul> <li>GitHub: @yourusername</li> </ul> <p>\u2190 Back to Home</p>"},{"location":"resources/","title":"Resources","text":"<p>A curated collection of resources for system design learning.</p>"},{"location":"resources/#books","title":"Books","text":"<ul> <li>Designing Data-Intensive Applications by Martin Kleppmann</li> <li>System Design Interview by Alex Xu (Volumes 1 &amp; 2)</li> <li>Building Microservices by Sam Newman</li> <li>The Art of Scalability by Martin L. Abbott &amp; Michael T. Fisher</li> </ul>"},{"location":"resources/#online-courses","title":"Online Courses","text":"<ul> <li>Grokking the System Design Interview</li> <li>System Design Primer (GitHub)</li> <li>ByteByteGo</li> </ul>"},{"location":"resources/#blogs-articles","title":"Blogs &amp; Articles","text":"<ul> <li>High Scalability Blog</li> <li>Netflix Tech Blog</li> <li>Uber Engineering Blog</li> <li>AWS Architecture Blog</li> <li>Google Cloud Architecture Center</li> </ul>"},{"location":"resources/#youtube-channels","title":"YouTube Channels","text":"<ul> <li>Gaurav Sen</li> <li>Tech Dummies Narendra L</li> <li>System Design Interview</li> <li>ByteByteGo</li> </ul>"},{"location":"resources/#tools-diagrams","title":"Tools &amp; Diagrams","text":"<ul> <li>Excalidraw - For system design diagrams</li> <li>draw.io - Diagramming tool</li> <li>Mermaid - Markdown-based diagrams</li> </ul>"},{"location":"resources/#practice-platforms","title":"Practice Platforms","text":"<ul> <li>LeetCode System Design Questions</li> <li>Pramp (Mock Interviews)</li> <li>interviewing.io</li> </ul>"},{"location":"resources/#key-repositories","title":"Key Repositories","text":"<ul> <li>System Design Primer</li> <li>Awesome System Design</li> </ul> <p>\u2190 Back to Home</p>"},{"location":"daily/","title":"Daily Learning Logs","text":"<p>This section contains my day-to-day learning entries, documenting progress, insights, and key takeaways.</p>"},{"location":"daily/#how-to-use-this-section","title":"How to Use This Section","text":"<p>Each daily log entry follows a consistent format:</p> <ul> <li>Date: When the learning session occurred</li> <li>Topics Covered: Main concepts explored</li> <li>Key Learnings: Important insights and takeaways</li> <li>Questions: Areas needing further exploration</li> <li>Resources: Links and references used</li> <li>Practice: Design problems or exercises completed</li> </ul>"},{"location":"daily/#recent-entries","title":"Recent Entries","text":"<p>Daily logs will appear here as you add them</p>"},{"location":"daily/#template-for-daily-entries","title":"Template for Daily Entries","text":"<pre><code># Day X - [Date]\n\n## Topics Covered\n- Topic 1\n- Topic 2\n\n## Key Learnings\n- Key insight 1\n- Key insight 2\n\n## System Design Concepts\n### Concept Name\nDescription and notes\n\n## Questions to Explore\n- [ ] Question 1\n- [ ] Question 2\n\n## Resources\n- [Link 1](url)\n- [Link 2](url)\n\n## Practice Problems\n- Problem description and solution approach\n\n## Reflections\nWhat went well, what to improve\n</code></pre>"},{"location":"daily/#archive-by-month","title":"Archive by Month","text":"<p>Organize your logs by month as they grow</p> <p>\u2190 Back to Home</p>"},{"location":"daily/2024-10-24/","title":"Day 1 - October 24, 2024","text":""},{"location":"daily/2024-10-24/#topics-covered","title":"Topics Covered","text":"<ul> <li>Setting up learning environment</li> <li>GitHub Pages and MkDocs setup</li> <li>Fundamental building blocks of distributed systems</li> <li>System design interview approach</li> <li>Scalability patterns from 1K to 10M+ users</li> </ul>"},{"location":"daily/2024-10-24/#key-learnings","title":"Key Learnings","text":"<ul> <li>Organized approach to system design learning is crucial</li> <li>Documentation helps solidify understanding</li> <li>Daily logging creates accountability and tracks progress</li> <li>Visual diagrams are essential for understanding system architecture</li> <li>Start simple, then scale incrementally</li> </ul>"},{"location":"daily/2024-10-24/#1-fundamental-building-blocks-of-distributed-systems","title":"1. Fundamental Building Blocks of Distributed Systems","text":""},{"location":"daily/2024-10-24/#system-architecture-overview","title":"System Architecture Overview","text":"<pre><code>graph TB\n    subgraph \"Client Layer\"\n        C1[Web Browser]\n        C2[Mobile App]\n        C3[API Client]\n    end\n\n    subgraph \"Edge Layer\"\n        CDN[CDN]\n        LB[Load Balancer]\n    end\n\n    subgraph \"Application Layer\"\n        API1[API Server 1]\n        API2[API Server 2]\n        API3[API Server 3]\n        Cache[(Cache)]\n    end\n\n    subgraph \"Data Layer\"\n        DB1[(Primary DB)]\n        DB2[(Replica DB)]\n        MQ[Message Queue]\n    end\n\n    subgraph \"Storage Layer\"\n        S3[Object Storage]\n        FS[File System]\n    end\n\n    C1 &amp; C2 &amp; C3 --&gt; CDN\n    CDN --&gt; LB\n    LB --&gt; API1 &amp; API2 &amp; API3\n    API1 &amp; API2 &amp; API3 --&gt; Cache\n    API1 &amp; API2 &amp; API3 --&gt; DB1\n    DB1 --&gt; DB2\n    API1 &amp; API2 &amp; API3 --&gt; MQ\n    API1 &amp; API2 &amp; API3 --&gt; S3</code></pre>"},{"location":"daily/2024-10-24/#load-balancers","title":"Load Balancers","text":"<pre><code>graph LR\n    Client[Client Requests] --&gt; LB{Load Balancer}\n    LB --&gt;|Round Robin| S1[Server 1]\n    LB --&gt;|Least Connections| S2[Server 2]\n    LB --&gt;|IP Hash| S3[Server 3]\n\n    style LB fill:#f9f,stroke:#333,stroke-width:4px</code></pre> <p>Key Algorithms:</p> <ul> <li>Round Robin: Distribute requests sequentially to each server in rotation</li> <li>Least Connections: Route to the server with the fewest active connections</li> <li>IP Hash: Consistently route the same client IP to the same server</li> </ul>"},{"location":"daily/2024-10-24/#caching-layers","title":"Caching Layers","text":"<pre><code>graph TD\n    Request[Client Request] --&gt; CDN{CDN Cache Hit?}\n    CDN --&gt;|Yes| Return1[Return Data]\n    CDN --&gt;|No| AppCache{App Cache Hit?}\n    AppCache --&gt;|Yes| Return2[Return Data]\n    AppCache --&gt;|No| DB[(Database)]\n    DB --&gt; AppCache\n    AppCache --&gt; CDN\n\n    style CDN fill:#9cf\n    style AppCache fill:#9cf</code></pre>"},{"location":"daily/2024-10-24/#database-replication","title":"Database Replication","text":"<pre><code>graph TB\n    App[Application Servers]\n    App --&gt;|Write| Master[(Master DB)]\n    App --&gt;|Read| R1[(Replica 1)]\n    App --&gt;|Read| R2[(Replica 2)]\n    App --&gt;|Read| R3[(Replica 3)]\n\n    Master -.-&gt;|Replicate| R1\n    Master -.-&gt;|Replicate| R2\n    Master -.-&gt;|Replicate| R3\n\n    style Master fill:#f96,stroke:#333,stroke-width:3px\n    style R1 fill:#9f9\n    style R2 fill:#9f9\n    style R3 fill:#9f9</code></pre>"},{"location":"daily/2024-10-24/#database-sharding","title":"Database Sharding","text":"<pre><code>graph TB\n    App[Application] --&gt; Router{Shard Router}\n\n    Router --&gt;|Users A-M| S1[(Shard 1&lt;br/&gt;A-M)]\n    Router --&gt;|Users N-Z| S2[(Shard 2&lt;br/&gt;N-Z)]\n    Router --&gt;|Users 0-9| S3[(Shard 3&lt;br/&gt;0-9)]\n\n    style Router fill:#ff9,stroke:#333,stroke-width:3px</code></pre> <p>Sharding Strategies: Range-based, Hash-based, Geographic</p>"},{"location":"daily/2024-10-24/#message-queues","title":"Message Queues","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant API\n    participant Queue\n    participant Worker\n    participant DB\n\n    Client-&gt;&gt;API: Upload Video\n    API-&gt;&gt;Queue: Add to processing queue\n    API--&gt;&gt;Client: 202 Accepted (Job ID)\n\n    Worker-&gt;&gt;Queue: Poll for jobs\n    Queue--&gt;&gt;Worker: Video processing task\n    Worker-&gt;&gt;Worker: Transcode video\n    Worker-&gt;&gt;DB: Update status\n    Worker-&gt;&gt;Client: Webhook notification</code></pre>"},{"location":"daily/2024-10-24/#microservices-architecture","title":"Microservices Architecture","text":"<pre><code>graph TB\n    Gateway[API Gateway]\n\n    Gateway --&gt; Auth[Auth Service]\n    Gateway --&gt; User[User Service]\n    Gateway --&gt; Order[Order Service]\n    Gateway --&gt; Payment[Payment Service]\n\n    Order --&gt; MQ[Message Queue]\n    Payment --&gt; MQ\n\n    Auth --&gt; AuthDB[(Auth DB)]\n    User --&gt; UserDB[(User DB)]\n    Order --&gt; OrderDB[(Order DB)]\n    Payment --&gt; PayDB[(Payment DB)]\n\n    style Gateway fill:#f9f,stroke:#333,stroke-width:3px</code></pre>"},{"location":"daily/2024-10-24/#cdn-architecture","title":"CDN Architecture","text":"<pre><code>graph TB\n    User1[User in US] --&gt; CDN_US[CDN Edge&lt;br/&gt;US East]\n    User2[User in EU] --&gt; CDN_EU[CDN Edge&lt;br/&gt;EU West]\n    User3[User in Asia] --&gt; CDN_ASIA[CDN Edge&lt;br/&gt;Singapore]\n\n    CDN_US -.-&gt;|Cache Miss| Origin[Origin Server]\n    CDN_EU -.-&gt;|Cache Miss| Origin\n    CDN_ASIA -.-&gt;|Cache Miss| Origin\n\n    Origin --&gt; S3[(Object Storage)]\n\n    style Origin fill:#f96\n    style CDN_US fill:#9cf\n    style CDN_EU fill:#9cf\n    style CDN_ASIA fill:#9cf</code></pre>"},{"location":"daily/2024-10-24/#2-system-design-interview-approach","title":"2. System Design Interview Approach","text":""},{"location":"daily/2024-10-24/#interview-flow","title":"Interview Flow","text":"<pre><code>graph LR\n    A[1. Requirements&lt;br/&gt;Functional + Non-Functional&lt;br/&gt;5-10 min] --&gt; B[2. Capacity Estimation&lt;br/&gt;3-5 min]\n    B --&gt; C[3. API Design&lt;br/&gt;+ Data Models&lt;br/&gt;5-7 min]\n    C --&gt; D[4. High-Level Design&lt;br/&gt;Satisfy functional requirements&lt;br/&gt;10-12 min]\n    D --&gt; E[5. Deep Dive&lt;br/&gt;Satisfy non-functional requirements&lt;br/&gt;12-15 min]\n    E --&gt; F[6. Bottlenecks &amp; Trade-offs&lt;br/&gt;5-10 min]\n\n    style A fill:#9cf\n    style B fill:#9f9\n    style C fill:#fc9\n    style D fill:#ff9\n    style E fill:#f9c\n    style F fill:#c9f</code></pre>"},{"location":"daily/2024-10-24/#step-1-functional-requirements","title":"Step 1: Functional Requirements","text":"<p>What the system DOES - Core features and user actions</p> <pre><code>mindmap\n  root((Functional&lt;br/&gt;Requirements))\n    User Actions\n      Sign up / Login\n      Create content\n      View content\n      Update/Delete\n      Search\n    Features\n      Feed generation\n      Notifications\n      Recommendations\n      Comments/Likes\n    Business Logic\n      Validation rules\n      Access control\n      Workflows</code></pre> <p>Example Questions: - What are the core features? - What can users do? - What happens when user performs action X? - Are there different user types/roles?</p>"},{"location":"daily/2024-10-24/#step-2-non-functional-requirements","title":"Step 2: Non-Functional Requirements","text":"<p>HOW WELL the system performs - Quality attributes</p> <pre><code>mindmap\n  root((Non-Functional&lt;br/&gt;Requirements))\n    Scalability\n      DAU/MAU?\n      QPS?\n      Data volume?\n      Growth rate?\n    Performance\n      Latency targets\n      Throughput\n      Response time\n    Availability\n      Uptime SLA\n      Fault tolerance\n      Recovery time\n    Consistency\n      Strong vs Eventual\n      CAP theorem\n      Data integrity\n    Security\n      Authentication\n      Authorization\n      Data privacy\n      Compliance</code></pre> <p>Example Questions: - How many users? (100M DAU) - Read vs Write ratio? (100:1) - What's acceptable latency? (&lt; 200ms) - Strong or eventual consistency? - Geographic distribution?</p>"},{"location":"daily/2024-10-24/#step-3-capacity-estimation","title":"Step 3: Capacity Estimation","text":"<pre><code>graph TB\n    Start[Requirements] --&gt; Users[Users&lt;br/&gt;100M DAU]\n    Users --&gt; Requests[Requests&lt;br/&gt;10 actions/user/day]\n    Requests --&gt; QPS[QPS Calculation&lt;br/&gt;100M \u00d7 10 / 86400]\n    QPS --&gt; Result[~12K QPS&lt;br/&gt;Peak: 36K QPS]\n\n    Start --&gt; Data[Data Volume]\n    Data --&gt; Storage[Storage Calc&lt;br/&gt;1KB per action]\n    Storage --&gt; Total[Daily: ~1TB&lt;br/&gt;Yearly: ~365TB]\n\n    style Result fill:#9f9\n    style Total fill:#9f9</code></pre> <p>Formulas: - QPS = (DAU \u00d7 actions_per_user) / 86,400 - Peak QPS = Average QPS \u00d7 3 - Storage = QPS \u00d7 data_size \u00d7 seconds_per_day</p>"},{"location":"daily/2024-10-24/#step-4-api-design","title":"Step 4: API Design","text":"<p>Define key endpoints early (subject to refinement in deep dive)</p> <pre><code>sequenceDiagram\n    participant Client\n    participant API Gateway\n    participant Service\n\n    Note over Client,Service: POST /api/v1/posts\n    Client-&gt;&gt;API Gateway: Create Post\n    API Gateway-&gt;&gt;Service: {user_id, content, media}\n    Service--&gt;&gt;API Gateway: 201 Created {post_id, timestamp}\n    API Gateway--&gt;&gt;Client: Response\n\n    Note over Client,Service: GET /api/v1/feed?user_id=456&amp;limit=20\n    Client-&gt;&gt;API Gateway: Get Feed\n    API Gateway-&gt;&gt;Service: Forward request\n    Service--&gt;&gt;API Gateway: 200 OK {posts: [...]}\n    API Gateway--&gt;&gt;Client: Response</code></pre> <p>Core APIs: - <code>POST /users</code> - Create user - <code>POST /posts</code> - Create content - <code>GET /feed</code> - Retrieve personalized feed - <code>GET /posts/:id</code> - Get specific post - <code>POST /posts/:id/like</code> - Like content - <code>DELETE /posts/:id</code> - Remove content</p>"},{"location":"daily/2024-10-24/#step-5-initial-data-models","title":"Step 5: Initial Data Models","text":"<p>High-level schema (will be refined during deep dive)</p> <pre><code>erDiagram\n    USER ||--o{ POST : creates\n    USER ||--o{ FOLLOW : follows\n    USER ||--o{ LIKE : likes\n    POST ||--o{ LIKE : receives\n    POST ||--o{ COMMENT : has\n\n    USER {\n        string user_id PK\n        string username\n        string email\n        string profile_pic\n        timestamp created_at\n    }\n\n    POST {\n        string post_id PK\n        string user_id FK\n        string content\n        string media_url\n        int like_count\n        timestamp created_at\n    }\n\n    FOLLOW {\n        string follower_id FK\n        string followee_id FK\n        timestamp created_at\n    }\n\n    LIKE {\n        string user_id FK\n        string post_id FK\n        timestamp created_at\n    }\n\n    COMMENT {\n        string comment_id PK\n        string post_id FK\n        string user_id FK\n        string content\n        timestamp created_at\n    }</code></pre> <p>Note: Data models will evolve during deep dive based on: - Query patterns - Sharding strategy - Denormalization needs - Caching requirements</p>"},{"location":"daily/2024-10-24/#step-6-high-level-design","title":"Step 6: High-Level Design","text":"<p>Goal: Satisfy functional requirements - focus on making features work</p> <pre><code>graph TB\n    Client[Clients] --&gt; DNS[DNS]\n    DNS --&gt; CDN[CDN]\n    CDN --&gt; LB[Load Balancer]\n\n    LB --&gt; API1[API Server]\n    LB --&gt; API2[API Server]\n\n    API1 &amp; API2 --&gt; Cache[(Redis Cache)]\n    API1 &amp; API2 --&gt; DB[(Primary DB)]\n\n    DB --&gt; Replica1[(Replica)]\n    DB --&gt; Replica2[(Replica)]\n\n    API1 &amp; API2 --&gt; Queue[Message Queue]\n    Queue --&gt; Worker1[Worker]\n    Queue --&gt; Worker2[Worker]\n\n    Worker1 &amp; Worker2 --&gt; Storage[(Object Storage)]\n\n    style LB fill:#f9f\n    style Cache fill:#9cf\n    style Queue fill:#ff9</code></pre> <p>At this stage: - Start simple - single region, basic components - Show data flow for key features - Map APIs to components - Demonstrate how functional requirements are met - Don't over-engineer yet!</p> <p>Example walkthrough: 1. User creates post \u2192 API Server \u2192 Save to DB 2. User views feed \u2192 API Server \u2192 Check Cache \u2192 Query DB if miss 3. Image upload \u2192 API Server \u2192 Queue \u2192 Worker \u2192 Object Storage</p>"},{"location":"daily/2024-10-24/#step-7-deep-dive","title":"Step 7: Deep Dive","text":"<p>Goal: Satisfy non-functional requirements - scale, performance, reliability</p> <pre><code>mindmap\n  root((Deep Dive&lt;br/&gt;Focus on NFRs))\n    Scalability\n      How to handle 100M users?\n      Database sharding strategy\n      Caching at scale\n      Horizontal scaling\n    Performance\n      How to achieve &lt;200ms latency?\n      Query optimization\n      Index design\n      CDN for static assets\n      Read replicas\n    Reliability\n      How to achieve 99.9% uptime?\n      Failover handling\n      Data replication\n      Multi-region deployment\n      Backup strategy\n    Consistency\n      Strong vs Eventual?\n      Write-through vs write-back cache\n      Replication lag handling\n    Security\n      Authentication (OAuth, JWT)\n      Rate limiting\n      Data encryption\n      DDoS protection</code></pre> <p>Typical Deep Dive Topics: - For 100M users: Add sharding, multiple cache clusters, auto-scaling - For &lt;200ms latency: Add edge locations, optimize queries, increase replicas - For high availability: Multi-AZ deployment, circuit breakers, health checks - For consistency: Choose replication strategy, handle conflicts</p> <p>Data Model Refinements: - Denormalize for read performance - Add composite indexes - Partition large tables - Add caching layer schemas</p>"},{"location":"daily/2024-10-24/#step-8-bottleneck-analysis-trade-offs","title":"Step 8: Bottleneck Analysis &amp; Trade-offs","text":"<pre><code>graph TB\n    subgraph \"Identify Bottlenecks\"\n        B1[Database writes&lt;br/&gt;Too slow?]\n        B2[Memory cache&lt;br/&gt;Insufficient?]\n        B3[Single point&lt;br/&gt;of failure?]\n        B4[Network&lt;br/&gt;bandwidth?]\n    end\n\n    subgraph \"Solutions\"\n        S1[Add write sharding&lt;br/&gt;Message queue]\n        S2[Scale cache tier&lt;br/&gt;Multiple Redis clusters]\n        S3[Add redundancy&lt;br/&gt;Multi-region deployment]\n        S4[Use CDN&lt;br/&gt;Compress data]\n    end\n\n    B1 --&gt; S1\n    B2 --&gt; S2\n    B3 --&gt; S3\n    B4 --&gt; S4\n\n    style B1 fill:#f99\n    style B2 fill:#f99\n    style B3 fill:#f99\n    style B4 fill:#f99\n    style S1 fill:#9f9\n    style S2 fill:#9f9\n    style S3 fill:#9f9\n    style S4 fill:#9f9</code></pre>"},{"location":"daily/2024-10-24/#trade-offs-discussion","title":"Trade-offs Discussion","text":"<pre><code>graph LR\n    subgraph \"Consistency vs Availability\"\n        C1[Strong Consistency&lt;br/&gt;SQL, ACID]\n        C2[Eventual Consistency&lt;br/&gt;NoSQL, BASE]\n    end\n\n    subgraph \"Latency vs Accuracy\"\n        L1[Real-time&lt;br/&gt;Approximate counts]\n        L2[Batch Processing&lt;br/&gt;Exact counts]\n    end\n\n    subgraph \"Cost vs Performance\"\n        P1[Premium Tier&lt;br/&gt;Low latency]\n        P2[Standard Tier&lt;br/&gt;Higher latency]\n    end\n\n    style C1 fill:#9cf\n    style C2 fill:#fc9\n    style L1 fill:#9cf\n    style L2 fill:#fc9\n    style P1 fill:#9cf\n    style P2 fill:#fc9</code></pre>"},{"location":"daily/2024-10-24/#interview-time-management","title":"Interview Time Management","text":"<pre><code>gantt\n    title 45-Minute System Design Interview\n    dateFormat mm\n    axisFormat %M min\n\n    section Requirements\n    Functional + Non-Functional :00, 10m\n\n    section Design\n    Capacity + API + Data Model :10, 8m\n    High-Level Design :18, 10m\n\n    section Deep Dive\n    NFR Optimization :28, 12m\n\n    section Wrap-up\n    Bottlenecks &amp; Trade-offs :40, 5m</code></pre>"},{"location":"daily/2024-10-24/#common-mistakes","title":"Common Mistakes","text":"<pre><code>graph TD\n    M1[\u274c Jumping to solution&lt;br/&gt;without clarifying]\n    M2[\u274c Over-engineering&lt;br/&gt;from the start]\n    M3[\u274c Ignoring constraints&lt;br/&gt;and scale]\n    M4[\u274c Not discussing&lt;br/&gt;trade-offs]\n    M5[\u274c Poor time&lt;br/&gt;management]\n\n    M1 --&gt; F1[\u2705 Ask questions first]\n    M2 --&gt; F2[\u2705 Start simple]\n    M3 --&gt; F3[\u2705 Calculate capacity]\n    M4 --&gt; F4[\u2705 Explain alternatives]\n    M5 --&gt; F5[\u2705 Watch the clock]\n\n    style M1 fill:#f99\n    style M2 fill:#f99\n    style M3 fill:#f99\n    style M4 fill:#f99\n    style M5 fill:#f99\n    style F1 fill:#9f9\n    style F2 fill:#9f9\n    style F3 fill:#9f9\n    style F4 fill:#9f9\n    style F5 fill:#9f9</code></pre>"},{"location":"daily/2024-10-24/#3-scalability-patterns","title":"3. Scalability Patterns","text":""},{"location":"daily/2024-10-24/#scaling-journey","title":"Scaling Journey","text":"<pre><code>graph LR\n    S1[1K Users&lt;br/&gt;Single Server] --&gt; S2[10K Users&lt;br/&gt;Add Cache + DB]\n    S2 --&gt; S3[100K Users&lt;br/&gt;Load Balancer&lt;br/&gt;+ Replicas]\n    S3 --&gt; S4[1M Users&lt;br/&gt;Sharding&lt;br/&gt;+ CDN]\n    S4 --&gt; S5[10M+ Users&lt;br/&gt;Microservices&lt;br/&gt;+ Multi-region]\n\n    style S1 fill:#9f9\n    style S2 fill:#9cf\n    style S3 fill:#ff9\n    style S4 fill:#f9c\n    style S5 fill:#f9f</code></pre>"},{"location":"daily/2024-10-24/#vertical-vs-horizontal-scaling","title":"Vertical vs Horizontal Scaling","text":"<pre><code>graph TB\n    subgraph \"Vertical Scaling (Scale Up)\"\n        V1[Small Server&lt;br/&gt;4 CPU, 8GB RAM] -.-&gt;|Upgrade| V2[Big Server&lt;br/&gt;16 CPU, 64GB RAM]\n    end\n\n    subgraph \"Horizontal Scaling (Scale Out)\"\n        LB[Load Balancer]\n        LB --&gt; H1[Server 1&lt;br/&gt;4 CPU, 8GB]\n        LB --&gt; H2[Server 2&lt;br/&gt;4 CPU, 8GB]\n        LB --&gt; H3[Server 3&lt;br/&gt;4 CPU, 8GB]\n        LB --&gt; H4[Server 4&lt;br/&gt;4 CPU, 8GB]\n    end\n\n    style V1 fill:#ff9\n    style V2 fill:#9f9\n    style LB fill:#f9f</code></pre>"},{"location":"daily/2024-10-24/#cache-aside-pattern","title":"Cache-Aside Pattern","text":"<pre><code>sequenceDiagram\n    participant App\n    participant Cache\n    participant DB\n\n    App-&gt;&gt;Cache: Get(key)\n    alt Cache Hit\n        Cache--&gt;&gt;App: Return value\n    else Cache Miss\n        Cache--&gt;&gt;App: null\n        App-&gt;&gt;DB: Query\n        DB--&gt;&gt;App: Data\n        App-&gt;&gt;Cache: Set(key, data)\n    end</code></pre>"},{"location":"daily/2024-10-24/#geographic-sharding","title":"Geographic Sharding","text":"<pre><code>graph TB\n    Router{Geographic Router}\n\n    Router --&gt;|NA Users| US[(US Shard&lt;br/&gt;North America)]\n    Router --&gt;|EU Users| EU[(EU Shard&lt;br/&gt;Europe)]\n    Router --&gt;|APAC Users| ASIA[(ASIA Shard&lt;br/&gt;Asia Pacific)]\n\n    style Router fill:#f9f,stroke:#333,stroke-width:3px\n    style US fill:#9cf\n    style EU fill:#9cf\n    style ASIA fill:#9cf</code></pre>"},{"location":"daily/2024-10-24/#event-driven-architecture","title":"Event-Driven Architecture","text":"<pre><code>sequenceDiagram\n    participant Order Service\n    participant Event Bus\n    participant Payment Service\n    participant Inventory Service\n    participant Notification Service\n\n    Order Service-&gt;&gt;Event Bus: OrderCreated Event\n    Event Bus-&gt;&gt;Payment Service: Process Payment\n    Event Bus-&gt;&gt;Inventory Service: Reserve Items\n    Event Bus-&gt;&gt;Notification Service: Send Confirmation\n\n    Payment Service-&gt;&gt;Event Bus: PaymentCompleted\n    Inventory Service-&gt;&gt;Event Bus: ItemsReserved\n    Notification Service-&gt;&gt;Event Bus: EmailSent</code></pre>"},{"location":"daily/2024-10-24/#cqrs-pattern","title":"CQRS Pattern","text":"<pre><code>graph TB\n    subgraph \"Write Side (Commands)\"\n        WC[Write Commands] --&gt; WDB[(Write DB&lt;br/&gt;Normalized)]\n        WDB --&gt; ES[Event Stream]\n    end\n\n    subgraph \"Read Side (Queries)\"\n        ES --&gt; R1[(Read Model 1&lt;br/&gt;Denormalized)]\n        ES --&gt; R2[(Read Model 2&lt;br/&gt;Cached)]\n        ES --&gt; R3[(Read Model 3&lt;br/&gt;Aggregated)]\n\n        R1 --&gt; RQ[Read Queries]\n        R2 --&gt; RQ\n        R3 --&gt; RQ\n    end\n\n    style WDB fill:#f96\n    style R1 fill:#9f9\n    style R2 fill:#9f9\n    style R3 fill:#9f9</code></pre>"},{"location":"daily/2024-10-24/#circuit-breaker-pattern","title":"Circuit Breaker Pattern","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; Closed: Normal Operation\n\n    Closed --&gt; Open: Failures exceed threshold\n    Open --&gt; HalfOpen: Timeout expires\n    HalfOpen --&gt; Closed: Success\n    HalfOpen --&gt; Open: Failure\n\n    note right of Closed\n        Allow all requests\n        Track failures\n    end note\n\n    note right of Open\n        Reject all requests\n        Return fallback\n    end note\n\n    note right of HalfOpen\n        Allow limited requests\n        Test if recovered\n    end note</code></pre>"},{"location":"daily/2024-10-24/#rate-limiting-token-bucket","title":"Rate Limiting: Token Bucket","text":"<pre><code>graph TB\n    subgraph \"Token Bucket\"\n        Bucket[Bucket&lt;br/&gt;Capacity: 100&lt;br/&gt;Current: 75]\n        Refill[Refill Rate&lt;br/&gt;10 tokens/sec]\n    end\n\n    Request1[Request 1] --&gt;|Consume token| Bucket\n    Request2[Request 2] --&gt;|Consume token| Bucket\n    Request3[Request 3] --&gt;|No tokens| Reject[429 Too Many Requests]\n\n    Refill -.-&gt;|Add tokens| Bucket\n\n    style Bucket fill:#9cf\n    style Reject fill:#f99</code></pre>"},{"location":"daily/2024-10-24/#auto-scaling","title":"Auto-Scaling","text":"<pre><code>graph TB\n    Monitor[Metrics Monitor&lt;br/&gt;CPU, Memory, QPS]\n\n    Monitor --&gt; Decision{Threshold&lt;br/&gt;Exceeded?}\n\n    Decision --&gt;|CPU &gt; 70%| ScaleUp[Scale Up&lt;br/&gt;Add 2 instances]\n    Decision --&gt;|CPU &lt; 30%| ScaleDown[Scale Down&lt;br/&gt;Remove 1 instance]\n    Decision --&gt;|Normal| Wait[Continue Monitoring]\n\n    ScaleUp --&gt; Instances[Update Instance Count]\n    ScaleDown --&gt; Instances\n    Instances --&gt; Monitor\n\n    style Decision fill:#f9f\n    style ScaleUp fill:#9f9\n    style ScaleDown fill:#fc9</code></pre>"},{"location":"daily/2024-10-24/#real-world-twitter-architecture","title":"Real-World: Twitter Architecture","text":"<pre><code>graph TB\n    subgraph \"User Actions\"\n        Post[Post Tweet]\n        Read[Read Timeline]\n    end\n\n    subgraph \"Write Path\"\n        Post --&gt; WLB[Write Load Balancer]\n        WLB --&gt; API1[API Server]\n        API1 --&gt; WDB[(Tweet DB Shard)]\n        API1 --&gt; Cache[Redis Cache]\n        API1 --&gt; MQ[Message Queue]\n        MQ --&gt; Worker[Fan-out Worker]\n        Worker --&gt; Timeline[(Timeline Cache)]\n    end\n\n    subgraph \"Read Path\"\n        Read --&gt; RLB[Read Load Balancer]\n        RLB --&gt; API2[API Server]\n        API2 --&gt; Timeline\n        Timeline -.-&gt;|Cache Miss| TDB[(Timeline DB)]\n    end\n\n    style WLB fill:#f9f\n    style RLB fill:#f9f\n    style Cache fill:#9cf\n    style Timeline fill:#9cf</code></pre>"},{"location":"daily/2024-10-24/#quick-reference-tables","title":"Quick Reference Tables","text":""},{"location":"daily/2024-10-24/#building-blocks","title":"Building Blocks","text":"Component Purpose When to Use Load Balancer Distribute traffic Multiple servers Cache Speed up reads Repeated requests Replicas Scale reads Read-heavy workload Sharding Scale writes Write-heavy workload Message Queue Async processing Time-consuming tasks CDN Serve static files Global users"},{"location":"daily/2024-10-24/#scaling-patterns-by-user-count","title":"Scaling Patterns by User Count","text":"Pattern Best For Scale Vertical Scaling Early stage &lt; 10K users Horizontal Scaling Growing traffic 10K-100K Caching Read-heavy workloads All scales Replication Read scalability 100K+ Sharding Write scalability 1M+ Microservices Large teams 100K+ Event-Driven Async workflows All scales CDN Global users All scales CQRS Complex reads 1M+ Auto-Scaling Variable traffic All scales"},{"location":"daily/2024-10-24/#resources","title":"Resources","text":"<ul> <li>MkDocs Material Theme Documentation</li> <li>System Design Primer</li> </ul>"},{"location":"daily/2024-10-24/#practice-problems","title":"Practice Problems","text":"<ul> <li>Design a URL Shortener (bit.ly)</li> <li>Design Twitter Feed</li> <li>Design Instagram</li> <li>Design Uber</li> </ul>"},{"location":"daily/2024-10-24/#reflections","title":"Reflections","text":"<p>Today was incredibly productive! Set up the learning environment and dove deep into three major system design topics. The diagram-first approach really helps visualize complex concepts. Key insight: always start simple and scale incrementally - don't over-engineer from the start.</p>"},{"location":"daily/2024-10-24/#next-steps","title":"Next Steps","text":"<ul> <li>[ ] Review FAANG system design plan in detail</li> <li>[ ] Complete URL Shortener design exercise</li> <li>[ ] Practice back-of-envelope calculations</li> <li>[ ] Study real-world case: How Netflix scaled</li> </ul> <p>\u2190 Back to Daily Logs | Home</p>"},{"location":"daily/2024-10-25/","title":"Day 2 - October 25, 2024","text":""},{"location":"daily/2024-10-25/#topics-covered","title":"Topics Covered","text":"<ul> <li>Consistent Hashing algorithm and implementation</li> <li>Stateless vs Stateful architecture patterns</li> <li>Load balancer types and deployment strategies</li> </ul>"},{"location":"daily/2024-10-25/#key-learnings","title":"Key Learnings","text":"<ul> <li>Consistent hashing minimizes key redistribution when nodes are added/removed</li> <li>Stateless architectures scale horizontally much easier than stateful ones</li> <li>Different load balancer layers serve different purposes (L4 vs L7)</li> <li>Virtual nodes help distribute load evenly in consistent hashing</li> </ul>"},{"location":"daily/2024-10-25/#1-consistent-hashing","title":"1. Consistent Hashing","text":""},{"location":"daily/2024-10-25/#the-problem-traditional-hashing","title":"The Problem: Traditional Hashing","text":"<pre><code>graph TB\n    subgraph \"Simple Hash: key % num_servers\"\n        K1[Key: user_1234&lt;br/&gt;Hash % 3 = 0] --&gt; S0[Server 0]\n        K2[Key: user_5678&lt;br/&gt;Hash % 3 = 1] --&gt; S1[Server 1]\n        K3[Key: user_9012&lt;br/&gt;Hash % 3 = 2] --&gt; S2[Server 2]\n    end\n\n    subgraph \"Problem: Add Server 3\"\n        K1b[Key: user_1234&lt;br/&gt;Hash % 4 = 0] --&gt; S0b[Server 0]\n        K2b[Key: user_5678&lt;br/&gt;Hash % 4 = 1] --&gt; S1b[Server 1]\n        K3b[Key: user_9012&lt;br/&gt;Hash % 4 = 0] -.-&gt;|MOVED!| S0b\n    end\n\n    style K3b fill:#f99\n    style S0b fill:#f99</code></pre> <p>Issue: When servers change, most keys get remapped \u2192 cache invalidation storm!</p>"},{"location":"daily/2024-10-25/#consistent-hashing-solution","title":"Consistent Hashing Solution","text":"<p>Core Idea: Hash both keys AND servers onto a ring (0 to 2^32-1)</p> <pre><code>graph TB\n    subgraph \"Hash Ring Concept\"\n        Ring[(\"Hash Ring&lt;br/&gt;0 to 2\u00b3\u00b2-1\")]\n\n        S0[Server 0&lt;br/&gt;Hash: 1000] --&gt; Ring\n        S1[Server 1&lt;br/&gt;Hash: 5000] --&gt; Ring\n        S2[Server 2&lt;br/&gt;Hash: 9000] --&gt; Ring\n\n        K1[Key A&lt;br/&gt;Hash: 2000] -.-&gt;|Clockwise to&lt;br/&gt;next server| S1\n        K2[Key B&lt;br/&gt;Hash: 6000] -.-&gt;|Clockwise to&lt;br/&gt;next server| S2\n        K3[Key C&lt;br/&gt;Hash: 500] -.-&gt;|Clockwise to&lt;br/&gt;next server| S0\n    end\n\n    style Ring fill:#9cf</code></pre>"},{"location":"daily/2024-10-25/#visual-hash-ring","title":"Visual: Hash Ring","text":"<pre><code>graph TD\n    subgraph \"Consistent Hash Ring\"\n        direction LR\n\n        Start([0]) --&gt; S0[Server 0&lt;br/&gt;Position: 1000]\n        S0 --&gt; K1[Key: user_A&lt;br/&gt;2000]\n        K1 --&gt; K2[Key: user_B&lt;br/&gt;3500]\n        K2 --&gt; S1[Server 1&lt;br/&gt;Position: 5000]\n        S1 --&gt; K3[Key: user_C&lt;br/&gt;6500]\n        K3 --&gt; S2[Server 2&lt;br/&gt;Position: 9000]\n        S2 --&gt; K4[Key: user_D&lt;br/&gt;10000]\n        K4 --&gt; End([Back to 0...])\n\n        End -.-&gt; Start\n    end\n\n    style S0 fill:#9f9\n    style S1 fill:#9f9\n    style S2 fill:#9f9</code></pre> <p>Rule: Each key goes to the first server clockwise from its hash position</p>"},{"location":"daily/2024-10-25/#adding-a-server","title":"Adding a Server","text":"<pre><code>graph TB\n    subgraph \"Before: 3 Servers\"\n        B0[Server 0: 1000]\n        B1[Server 1: 5000]\n        B2[Server 2: 9000]\n\n        BK1[Keys 1001-5000&lt;br/&gt;6 keys] --&gt; B1\n        BK2[Keys 5001-9000&lt;br/&gt;5 keys] --&gt; B2\n        BK3[Keys 9001-1000&lt;br/&gt;7 keys] --&gt; B0\n    end\n\n    subgraph \"After: Add Server 3 at 7000\"\n        A0[Server 0: 1000]\n        A1[Server 1: 5000]\n        A3[Server 3: 7000&lt;br/&gt;NEW]\n        A2[Server 2: 9000]\n\n        AK1[Keys 1001-5000&lt;br/&gt;6 keys] --&gt; A1\n        AK2[Keys 5001-7000&lt;br/&gt;2 keys] --&gt; A3\n        AK3[Keys 7001-9000&lt;br/&gt;3 keys] --&gt; A2\n        AK4[Keys 9001-1000&lt;br/&gt;7 keys] --&gt; A0\n    end\n\n    BK2 -.-&gt;|Only 2 keys moved!| AK2\n\n    style A3 fill:#9f9\n    style BK2 fill:#ff9\n    style AK2 fill:#9f9</code></pre> <p>Benefit: Only keys between Server 1 (5000) and Server 3 (7000) are remapped!</p>"},{"location":"daily/2024-10-25/#the-virtual-nodes-problem","title":"The Virtual Nodes Problem","text":"<p>Problem: Without virtual nodes, servers may get uneven load</p> <pre><code>graph LR\n    subgraph Uneven[\"\u274c Problem: Uneven Distribution\"]\n        P1[Server 0&lt;br/&gt;Pos: 1000&lt;br/&gt;Load: 90%]\n        P2[Server 1&lt;br/&gt;Pos: 2000&lt;br/&gt;Load: 5%]\n        P3[Server 2&lt;br/&gt;Pos: 3000&lt;br/&gt;Load: 5%]\n    end\n\n    style P1 fill:#f99\n    style P2 fill:#ff9\n    style P3 fill:#ff9</code></pre> <p>Solution: Virtual Nodes - Distribute each server across multiple ring positions</p>"},{"location":"daily/2024-10-25/#virtual-nodes-ring-visualization","title":"Virtual Nodes Ring Visualization","text":"<pre><code>graph TD\n    Start([Ring Start: 0])\n\n    Start --&gt; S0V1[\ud83d\udfe2 S0-VNode1&lt;br/&gt;Position: 1000]\n    S0V1 --&gt; K1[\ud83d\udd11 Key: user_alice&lt;br/&gt;Hash: 1500]\n    K1 --&gt; S1V1[\ud83d\udd35 S1-VNode1&lt;br/&gt;Position: 2000]\n    S1V1 --&gt; K2[\ud83d\udd11 Key: user_bob&lt;br/&gt;Hash: 2800]\n    K2 --&gt; S2V1[\ud83d\udfe0 S2-VNode1&lt;br/&gt;Position: 3000]\n    S2V1 --&gt; K3[\ud83d\udd11 Key: user_charlie&lt;br/&gt;Hash: 4200]\n    K3 --&gt; S0V2[\ud83d\udfe2 S0-VNode2&lt;br/&gt;Position: 5000]\n    S0V2 --&gt; K4[\ud83d\udd11 Key: user_dave&lt;br/&gt;Hash: 5500]\n    K4 --&gt; S1V2[\ud83d\udd35 S1-VNode2&lt;br/&gt;Position: 6000]\n    S1V2 --&gt; K5[\ud83d\udd11 Key: user_eve&lt;br/&gt;Hash: 6800]\n    K5 --&gt; S2V2[\ud83d\udfe0 S2-VNode2&lt;br/&gt;Position: 7000]\n    S2V2 --&gt; K6[\ud83d\udd11 Key: user_frank&lt;br/&gt;Hash: 8500]\n    K6 --&gt; S0V3[\ud83d\udfe2 S0-VNode3&lt;br/&gt;Position: 9000]\n    S0V3 --&gt; K7[\ud83d\udd11 Key: user_grace&lt;br/&gt;Hash: 9500]\n    K7 --&gt; S1V3[\ud83d\udd35 S1-VNode3&lt;br/&gt;Position: 10000]\n    S1V3 --&gt; K8[\ud83d\udd11 Key: user_henry&lt;br/&gt;Hash: 10500]\n    K8 --&gt; S2V3[\ud83d\udfe0 S2-VNode3&lt;br/&gt;Position: 11000]\n    S2V3 --&gt; End([Wraps to 0...])\n\n    End -.-&gt; Start\n\n    style S0V1 fill:#9f9\n    style S0V2 fill:#9f9\n    style S0V3 fill:#9f9\n    style S1V1 fill:#9cf\n    style S1V2 fill:#9cf\n    style S1V3 fill:#9cf\n    style S2V1 fill:#fc9\n    style S2V2 fill:#fc9\n    style S2V3 fill:#fc9\n    style K1 fill:#ffd\n    style K2 fill:#ffd\n    style K3 fill:#ffd\n    style K4 fill:#ffd\n    style K5 fill:#ffd\n    style K6 fill:#ffd\n    style K7 fill:#ffd\n    style K8 fill:#ffd</code></pre> <p>Key Mapping Rules: - \ud83d\udd11 user_alice (1500) \u2192 Next server clockwise: \ud83d\udfe2 S0-VNode1 (2000) \u2192 Server 0 - \ud83d\udd11 user_bob (2800) \u2192 Next server clockwise: \ud83d\udfe0 S2-VNode1 (3000) \u2192 Server 2 - \ud83d\udd11 user_charlie (4200) \u2192 Next server clockwise: \ud83d\udfe2 S0-VNode2 (5000) \u2192 Server 0 - \ud83d\udd11 user_dave (5500) \u2192 Next server clockwise: \ud83d\udd35 S1-VNode2 (6000) \u2192 Server 1 - \ud83d\udd11 user_eve (6800) \u2192 Next server clockwise: \ud83d\udfe0 S2-VNode2 (7000) \u2192 Server 2 - \ud83d\udd11 user_frank (8500) \u2192 Next server clockwise: \ud83d\udfe2 S0-VNode3 (9000) \u2192 Server 0 - \ud83d\udd11 user_grace (9500) \u2192 Next server clockwise: \ud83d\udd35 S1-VNode3 (10000) \u2192 Server 1 - \ud83d\udd11 user_henry (10500) \u2192 Next server clockwise: \ud83d\udfe0 S2-VNode3 (11000) \u2192 Server 2</p> <p>Result: Keys evenly distributed across all physical servers!</p> <p>Virtual Nodes: Each physical server gets multiple positions on the ring (typically 100-200)</p>"},{"location":"daily/2024-10-25/#consistent-hashing-algorithm","title":"Consistent Hashing Algorithm","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant HashRing\n    participant Server\n\n    Client-&gt;&gt;HashRing: hash(key) = 6500\n    HashRing-&gt;&gt;HashRing: Find next server clockwise\n    Note over HashRing: Servers at: 1000, 5000, 9000&lt;br/&gt;6500 \u2192 next is 9000\n    HashRing-&gt;&gt;Server: Route to Server 2 (9000)\n    Server--&gt;&gt;Client: Return data</code></pre>"},{"location":"daily/2024-10-25/#real-world-use-cases","title":"Real-World Use Cases","text":"<pre><code>mindmap\n  root((Consistent&lt;br/&gt;Hashing&lt;br/&gt;Use Cases))\n    Distributed Caching\n      Memcached\n      Redis Cluster\n      CDN nodes\n    Load Balancing\n      Service mesh routing\n      API gateway\n      Database sharding\n    Distributed Storage\n      Cassandra\n      DynamoDB\n      Riak\n    Content Distribution\n      P2P networks\n      BitTorrent\n      IPFS</code></pre>"},{"location":"daily/2024-10-25/#consistent-hashing-vs-simple-hashing","title":"Consistent Hashing vs Simple Hashing","text":"Aspect Simple Hash (key % N) Consistent Hash Redistribution on add/remove ~100% keys remapped Only K/N keys (K=total keys, N=nodes) Load distribution Perfect if N is stable Good with virtual nodes Complexity O(1) O(log N) with binary search Use case Static server count Dynamic scaling Cache hit rate on scale Drops to ~0% Maintains ~(N-1)/N hit rate"},{"location":"daily/2024-10-25/#implementation-pseudocode","title":"Implementation Pseudocode","text":"<pre><code>graph TD\n    Start[Add Key to Ring] --&gt; Hash[Hash key to position P]\n    Hash --&gt; Search[Binary search for next server &gt; P]\n    Search --&gt; Found{Server found?}\n    Found --&gt;|Yes| Return[Return server]\n    Found --&gt;|No| Wrap[Wrap around to first server]\n    Wrap --&gt; Return\n\n    AddServer[Add Server] --&gt; HashServer[Hash server ID multiple times]\n    HashServer --&gt; VNodes[Create 150 virtual nodes]\n    VNodes --&gt; Insert[Insert all positions into ring]\n    Insert --&gt; Sort[Sort ring by position]\n\n    style Start fill:#9cf\n    style AddServer fill:#9f9</code></pre>"},{"location":"daily/2024-10-25/#2-stateless-vs-stateful-architecture","title":"2. Stateless vs Stateful Architecture","text":""},{"location":"daily/2024-10-25/#stateful-architecture","title":"Stateful Architecture","text":"<pre><code>graph TB\n    Client1[Client A] --&gt; LB[Load Balancer]\n    Client2[Client B] --&gt; LB\n\n    LB --&gt;|Session 1| S1[Server 1&lt;br/&gt;\ud83d\udcbe Session Data:&lt;br/&gt;User A logged in&lt;br/&gt;Cart: 3 items]\n    LB --&gt;|Session 2| S2[Server 2&lt;br/&gt;\ud83d\udcbe Session Data:&lt;br/&gt;User B logged in&lt;br/&gt;Cart: 1 item]\n\n    Client1 -.-&gt;|Next request&lt;br/&gt;MUST go to Server 1| S1\n\n    style S1 fill:#f99\n    style S2 fill:#f99</code></pre> <p>Problem: Client is \"stuck\" to specific server (sticky sessions)</p>"},{"location":"daily/2024-10-25/#stateless-architecture","title":"Stateless Architecture","text":"<pre><code>graph TB\n    Client1[Client A] --&gt; LB[Load Balancer]\n    Client2[Client B] --&gt; LB\n\n    LB --&gt;|Any request| S1[Server 1&lt;br/&gt;No local state]\n    LB --&gt;|Any request| S2[Server 2&lt;br/&gt;No local state]\n    LB --&gt;|Any request| S3[Server 3&lt;br/&gt;No local state]\n\n    S1 &amp; S2 &amp; S3 --&gt; Cache[(Redis Cache&lt;br/&gt;All session data)]\n    S1 &amp; S2 &amp; S3 --&gt; DB[(Database&lt;br/&gt;Persistent data)]\n\n    style S1 fill:#9f9\n    style S2 fill:#9f9\n    style S3 fill:#9f9\n    style Cache fill:#9cf</code></pre> <p>Benefit: Any server can handle any request - perfect for horizontal scaling!</p>"},{"location":"daily/2024-10-25/#session-storage-comparison","title":"Session Storage Comparison","text":"<pre><code>graph LR\n    subgraph \"Stateful: Server-Side Sessions\"\n        SF1[Server 1&lt;br/&gt;Session Store]\n        SF2[Server 2&lt;br/&gt;Session Store]\n        SF3[Server 3&lt;br/&gt;Session Store]\n\n        Problem[\u274c Session affinity required&lt;br/&gt;\u274c Lost on server failure&lt;br/&gt;\u274c Hard to scale]\n    end\n\n    subgraph \"Stateless: External Session Store\"\n        SL1[Server 1]\n        SL2[Server 2]\n        SL3[Server 3]\n\n        SL1 &amp; SL2 &amp; SL3 --&gt; Redis[(Redis Cluster)]\n\n        Benefit[\u2705 No session affinity&lt;br/&gt;\u2705 Survives server failure&lt;br/&gt;\u2705 Easy to scale]\n    end\n\n    style SF1 fill:#f99\n    style SF2 fill:#f99\n    style SF3 fill:#f99\n    style SL1 fill:#9f9\n    style SL2 fill:#9f9\n    style SL3 fill:#9f9</code></pre>"},{"location":"daily/2024-10-25/#stateless-authentication-flow","title":"Stateless Authentication Flow","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant LB as Load Balancer\n    participant S1 as Server 1\n    participant S2 as Server 2\n    participant Redis\n    participant DB\n\n    Client-&gt;&gt;LB: Login (username, password)\n    LB-&gt;&gt;S1: Route to Server 1\n    S1-&gt;&gt;DB: Verify credentials\n    DB--&gt;&gt;S1: User valid\n    S1-&gt;&gt;Redis: Store session (session_id, user_data)\n    S1--&gt;&gt;Client: Return JWT token\n\n    Note over Client: Next request goes to different server\n\n    Client-&gt;&gt;LB: Get cart (JWT token)\n    LB-&gt;&gt;S2: Route to Server 2\n    S2-&gt;&gt;S2: Validate JWT signature\n    S2-&gt;&gt;Redis: Get session data\n    Redis--&gt;&gt;S2: User data\n    S2-&gt;&gt;DB: Fetch cart\n    DB--&gt;&gt;S2: Cart items\n    S2--&gt;&gt;Client: Cart data</code></pre>"},{"location":"daily/2024-10-25/#stateless-design-patterns","title":"Stateless Design Patterns","text":"<pre><code>mindmap\n  root((Stateless&lt;br/&gt;Patterns))\n    Client-Side State\n      JWT tokens\n      Cookies\n      LocalStorage\n      URL parameters\n    Shared State Store\n      Redis/Memcached\n      DynamoDB\n      Cassandra\n    Database Sessions\n      PostgreSQL\n      MySQL\n      MongoDB\n    Distributed Cache\n      Redis Cluster\n      Hazelcast\n      Apache Ignite</code></pre>"},{"location":"daily/2024-10-25/#state-migration-strategy","title":"State Migration Strategy","text":"<pre><code>graph TD\n    Start[Stateful Application] --&gt; Identify[Identify session data]\n    Identify --&gt; Choose{Choose storage}\n\n    Choose --&gt;|Fast, temporary| Redis[External Cache&lt;br/&gt;Redis/Memcached]\n    Choose --&gt;|Persistent| DB[Database&lt;br/&gt;PostgreSQL/DynamoDB]\n    Choose --&gt;|Client-side| JWT[JWT Tokens&lt;br/&gt;Signed by server]\n\n    Redis --&gt; Implement[Implement session API]\n    DB --&gt; Implement\n    JWT --&gt; Implement\n\n    Implement --&gt; Test[Test with load balancer]\n    Test --&gt; Verify{Sessions work&lt;br/&gt;across servers?}\n\n    Verify --&gt;|No| Debug[Debug session sync]\n    Verify --&gt;|Yes| Deploy[Deploy stateless architecture]\n\n    Debug --&gt; Test\n\n    style Start fill:#f99\n    style Deploy fill:#9f9</code></pre>"},{"location":"daily/2024-10-25/#comparison-table","title":"Comparison Table","text":"Aspect Stateful Stateless Scaling Vertical only (complex horizontal) Easy horizontal scaling Load balancing Requires sticky sessions Any server handles any request Failure handling Lost sessions on crash Sessions survive server failures Deployment Complex (session drain) Simple (just add/remove servers) Memory usage High (stores all sessions) Low (compute only) Database load Lower (cached locally) Higher (external lookups) Latency Lower (local access) Slightly higher (network call) Use cases WebSockets, gaming servers REST APIs, microservices"},{"location":"daily/2024-10-25/#3-load-balancer-types","title":"3. Load Balancer Types","text":""},{"location":"daily/2024-10-25/#layer-4-transport-layer-load-balancer","title":"Layer 4 (Transport Layer) Load Balancer","text":"<pre><code>graph TB\n    Client[Client&lt;br/&gt;IP: 1.2.3.4&lt;br/&gt;Port: 50000] --&gt;|TCP packet| L4[Layer 4 LB&lt;br/&gt;Works with:&lt;br/&gt;IP + Port only]\n\n    L4 --&gt;|Forward based on&lt;br/&gt;IP hash or round-robin| S1[Server 1&lt;br/&gt;10.0.1.10:80]\n    L4 --&gt; S2[Server 2&lt;br/&gt;10.0.1.11:80]\n    L4 --&gt; S3[Server 3&lt;br/&gt;10.0.1.12:80]\n\n    Note1[No HTTP inspection&lt;br/&gt;Fast &amp; efficient&lt;br/&gt;NAT + Forwarding]\n\n    style L4 fill:#9cf</code></pre> <p>Characteristics: - Works at TCP/UDP level - Inspects: IP address, Port - Fast (no HTTP parsing) - Cannot route based on URL or headers</p>"},{"location":"daily/2024-10-25/#layer-7-application-layer-load-balancer","title":"Layer 7 (Application Layer) Load Balancer","text":"<pre><code>graph TB\n    Client[Client Request&lt;br/&gt;GET /api/users&lt;br/&gt;Host: api.example.com&lt;br/&gt;Cookie: session=abc] --&gt;|HTTP request| L7[Layer 7 LB&lt;br/&gt;Inspects:&lt;br/&gt;URL, Headers,&lt;br/&gt;Cookies, Body]\n\n    L7 --&gt;|/api/users*| API[API Servers]\n    L7 --&gt;|/static/*| Static[Static Servers]\n    L7 --&gt;|/admin/*| Admin[Admin Servers]\n\n    API --&gt; A1[API Server 1]\n    API --&gt; A2[API Server 2]\n\n    Static --&gt; S1[CDN Server 1]\n    Static --&gt; S2[CDN Server 2]\n\n    Admin --&gt; Ad1[Admin Server 1]\n\n    style L7 fill:#f9f</code></pre> <p>Characteristics: - Works at HTTP/HTTPS level - Inspects: URL, headers, cookies, body - Slower (parses HTTP) - Can route based on content</p>"},{"location":"daily/2024-10-25/#l4-vs-l7-comparison","title":"L4 vs L7 Comparison","text":"<pre><code>graph LR\n    subgraph \"Layer 4: Fast but Simple\"\n        L4[L4 Load Balancer]\n        L4 --&gt;|Based on IP:Port| L4_1[Backend Pool]\n\n        L4_Features[\u2705 Very fast&lt;br/&gt;\u2705 Low latency&lt;br/&gt;\u2705 Protocol agnostic&lt;br/&gt;\u274c No content routing&lt;br/&gt;\u274c No SSL termination&lt;br/&gt;\u274c No caching]\n    end\n\n    subgraph \"Layer 7: Slower but Smart\"\n        L7[L7 Load Balancer]\n        L7 --&gt;|Based on URL/Headers| L7_1[Route /api]\n        L7 --&gt;|Based on URL/Headers| L7_2[Route /static]\n\n        L7_Features[\u2705 Content-based routing&lt;br/&gt;\u2705 SSL termination&lt;br/&gt;\u2705 Caching&lt;br/&gt;\u2705 WAF integration&lt;br/&gt;\u274c Slower&lt;br/&gt;\u274c Higher latency]\n    end\n\n    style L4 fill:#9cf\n    style L7 fill:#f9f</code></pre>"},{"location":"daily/2024-10-25/#deployment-strategies","title":"Deployment Strategies","text":""},{"location":"daily/2024-10-25/#strategy-1-dns-round-robin","title":"Strategy 1: DNS Round Robin","text":"<p>Yes! DNS can do load balancing by returning multiple IPs in rotating order</p> <pre><code>sequenceDiagram\n    participant C1 as Client 1\n    participant C2 as Client 2\n    participant C3 as Client 3\n    participant DNS\n    participant S1 as Server 1.2.3.4\n    participant S2 as Server 1.2.3.5\n    participant S3 as Server 1.2.3.6\n\n    C1-&gt;&gt;DNS: Query: example.com?\n    DNS--&gt;&gt;C1: Response: [1.2.3.4, 1.2.3.5, 1.2.3.6]\n    C1-&gt;&gt;S1: Connect to first IP\n\n    C2-&gt;&gt;DNS: Query: example.com?\n    DNS--&gt;&gt;C2: Response: [1.2.3.5, 1.2.3.6, 1.2.3.4] (rotated!)\n    C2-&gt;&gt;S2: Connect to first IP\n\n    C3-&gt;&gt;DNS: Query: example.com?\n    DNS--&gt;&gt;C3: Response: [1.2.3.6, 1.2.3.4, 1.2.3.5] (rotated!)\n    C3-&gt;&gt;S3: Connect to first IP</code></pre> <p>How DNS Round Robin Works:</p> <pre><code>graph TB\n    subgraph \"DNS Server Configuration\"\n        Config[\"example.com A records:&lt;br/&gt;1.2.3.4&lt;br/&gt;1.2.3.5&lt;br/&gt;1.2.3.6&lt;br/&gt;TTL: 60 seconds\"]\n    end\n\n    subgraph \"Query 1\"\n        Q1[Client asks:&lt;br/&gt;example.com] --&gt; R1[DNS returns:&lt;br/&gt;1.2.3.4 \u2190 first&lt;br/&gt;1.2.3.5&lt;br/&gt;1.2.3.6]\n    end\n\n    subgraph \"Query 2\"\n        Q2[Client asks:&lt;br/&gt;example.com] --&gt; R2[DNS returns:&lt;br/&gt;1.2.3.5 \u2190 first&lt;br/&gt;1.2.3.6&lt;br/&gt;1.2.3.4]\n    end\n\n    subgraph \"Query 3\"\n        Q3[Client asks:&lt;br/&gt;example.com] --&gt; R3[DNS returns:&lt;br/&gt;1.2.3.6 \u2190 first&lt;br/&gt;1.2.3.4&lt;br/&gt;1.2.3.5]\n    end\n\n    Config --&gt; Q1 &amp; Q2 &amp; Q3\n\n    style Config fill:#9cf</code></pre> <p>Problems with DNS Round Robin:</p> <pre><code>graph TD\n    Issue1[\u274c No Health Checks] --&gt; Explain1[DNS keeps returning&lt;br/&gt;dead server IPs]\n    Issue2[\u274c Caching] --&gt; Explain2[Browsers/ISPs cache DNS&lt;br/&gt;for minutes/hours&lt;br/&gt;ignores TTL]\n    Issue3[\u274c Uneven Load] --&gt; Explain3[Some clients make&lt;br/&gt;1000x more requests&lt;br/&gt;than others]\n    Issue4[\u274c Geographic Routing] --&gt; Explain4[Cannot route users&lt;br/&gt;to nearest server]\n\n    style Issue1 fill:#f99\n    style Issue2 fill:#f99\n    style Issue3 fill:#f99\n    style Issue4 fill:#f99</code></pre> <p>When DNS Round Robin Works: - \u2705 Simple CDN distribution - \u2705 Low-traffic sites - \u2705 Stateless applications - \u2705 When servers rarely fail</p> <p>Real Example: <pre><code># Try this command - you'll see multiple IPs!\n$ nslookup google.com\n\n# Returns different IPs each time (round robin):\n# 142.250.185.206\n# 142.250.185.238\n# 142.250.185.174\n# ... etc\n</code></pre></p>"},{"location":"daily/2024-10-25/#strategy-2-single-load-balancer","title":"Strategy 2: Single Load Balancer","text":"<pre><code>graph TB\n    Client[Clients] --&gt; LB[Load Balancer&lt;br/&gt;Single Point of Failure!]\n\n    LB --&gt; S1[Server 1]\n    LB --&gt; S2[Server 2]\n    LB --&gt; S3[Server 3]\n\n    Problem[\u274c SPOF&lt;br/&gt;\u274c Limited capacity&lt;br/&gt;\u2705 Simple setup]\n\n    style LB fill:#f99</code></pre>"},{"location":"daily/2024-10-25/#strategy-3-active-passive-lb","title":"Strategy 3: Active-Passive LB","text":"<pre><code>graph TB\n    Client[Clients] --&gt; VIP[Virtual IP&lt;br/&gt;10.0.0.100]\n\n    VIP --&gt; Active[Active LB&lt;br/&gt;Handles traffic&lt;br/&gt;Heartbeat every 1s]\n\n    Active -.-&gt;|Heartbeat| Passive[Passive LB&lt;br/&gt;Standby mode]\n\n    Passive -.-&gt;|Takes over if&lt;br/&gt;Active fails| VIP\n\n    Active --&gt; S1[Server 1]\n    Active --&gt; S2[Server 2]\n    Active --&gt; S3[Server 3]\n\n    style Active fill:#9f9\n    style Passive fill:#9cf</code></pre>"},{"location":"daily/2024-10-25/#strategy-4-active-active-lb-best","title":"Strategy 4: Active-Active LB (Best)","text":"<pre><code>graph TB\n    Client[Clients] --&gt; DNS[DNS&lt;br/&gt;Round-robin]\n\n    DNS --&gt; LB1[Load Balancer 1&lt;br/&gt;Handles 50% traffic]\n    DNS --&gt; LB2[Load Balancer 2&lt;br/&gt;Handles 50% traffic]\n\n    LB1 --&gt; Pool[Server Pool]\n    LB2 --&gt; Pool\n\n    Pool --&gt; S1[Server 1]\n    Pool --&gt; S2[Server 2]\n    Pool --&gt; S3[Server 3]\n    Pool --&gt; S4[Server 4]\n\n    Benefits[\u2705 No SPOF&lt;br/&gt;\u2705 Better capacity&lt;br/&gt;\u2705 Both LBs utilized]\n\n    style LB1 fill:#9f9\n    style LB2 fill:#9f9</code></pre>"},{"location":"daily/2024-10-25/#multi-tier-load-balancing","title":"Multi-Tier Load Balancing","text":"<pre><code>graph TB\n    Internet[Internet] --&gt; DNS[DNS&lt;br/&gt;Global Load Balancer]\n\n    DNS --&gt;|Geographic routing| US[US Region]\n    DNS --&gt;|Geographic routing| EU[EU Region]\n    DNS --&gt;|Geographic routing| ASIA[Asia Region]\n\n    US --&gt; US_L4[L4 Load Balancer&lt;br/&gt;AWS NLB]\n    EU --&gt; EU_L4[L4 Load Balancer&lt;br/&gt;AWS NLB]\n\n    US_L4 --&gt; US_L7[L7 Load Balancer&lt;br/&gt;AWS ALB]\n    EU_L4 --&gt; EU_L7[L7 Load Balancer&lt;br/&gt;AWS ALB]\n\n    US_L7 --&gt;|/api/*| US_API[API Servers]\n    US_L7 --&gt;|/static/*| US_CDN[CDN Servers]\n\n    EU_L7 --&gt;|/api/*| EU_API[API Servers]\n    EU_L7 --&gt;|/static/*| EU_CDN[CDN Servers]\n\n    style DNS fill:#9cf\n    style US_L4 fill:#9cf\n    style EU_L4 fill:#9cf\n    style US_L7 fill:#f9f\n    style EU_L7 fill:#f9f</code></pre>"},{"location":"daily/2024-10-25/#load-balancer-algorithms-deep-dive","title":"Load Balancer Algorithms Deep Dive","text":"<pre><code>graph TD\n    Start{Select Algorithm}\n\n    Start --&gt;|Simple| RR[Round Robin&lt;br/&gt;S1\u2192S2\u2192S3\u2192S1...]\n    Start --&gt;|Weighted| WRR[Weighted Round Robin&lt;br/&gt;S1: 3x, S2: 2x, S3: 1x]\n    Start --&gt;|Performance| LC[Least Connections&lt;br/&gt;Route to least busy]\n    Start --&gt;|Geographic| GEO[Geographic&lt;br/&gt;Route to nearest]\n    Start --&gt;|Sticky| HASH[Consistent Hash&lt;br/&gt;Same client \u2192 Same server]\n    Start --&gt;|Smart| AI[Least Response Time&lt;br/&gt;Track actual latency]\n\n    RR --&gt; Use1[Use: Equal capacity servers&lt;br/&gt;Simple workloads]\n    WRR --&gt; Use2[Use: Different server sizes&lt;br/&gt;e.g., 2x capacity server]\n    LC --&gt; Use3[Use: Long-lived connections&lt;br/&gt;WebSockets, databases]\n    GEO --&gt; Use4[Use: Global users&lt;br/&gt;Latency-sensitive apps]\n    HASH --&gt; Use5[Use: Session affinity needed&lt;br/&gt;Stateful apps]\n    AI --&gt; Use6[Use: Variable backend latency&lt;br/&gt;Optimal performance]\n\n    style RR fill:#9f9\n    style WRR fill:#9cf\n    style LC fill:#ff9\n    style HASH fill:#f9c</code></pre>"},{"location":"daily/2024-10-25/#health-checks","title":"Health Checks","text":"<pre><code>sequenceDiagram\n    participant LB as Load Balancer\n    participant S1 as Server 1 (Healthy)\n    participant S2 as Server 2 (Unhealthy)\n    participant S3 as Server 3 (Healthy)\n\n    loop Every 5 seconds\n        LB-&gt;&gt;S1: GET /health\n        S1--&gt;&gt;LB: 200 OK\n\n        LB-&gt;&gt;S2: GET /health\n        S2--&gt;&gt;LB: Timeout / 500 Error\n\n        LB-&gt;&gt;S3: GET /health\n        S3--&gt;&gt;LB: 200 OK\n    end\n\n    Note over LB,S2: S2 marked unhealthy&lt;br/&gt;Removed from rotation\n\n    LB-&gt;&gt;S1: Route traffic\n    LB-&gt;&gt;S3: Route traffic\n    LB-xS2: No traffic sent\n\n    Note over LB,S2: After 3 successful checks,&lt;br/&gt;S2 added back to rotation</code></pre>"},{"location":"daily/2024-10-25/#popular-load-balancers","title":"Popular Load Balancers","text":"<pre><code>mindmap\n  root((Load&lt;br/&gt;Balancers))\n    Hardware\n      F5 BIG-IP\n      Citrix ADC\n      A10 Networks\n      Expensive, powerful\n    Software\n      HAProxy\n      NGINX\n      Envoy\n      Traefik\n      Free, flexible\n    Cloud\n      AWS ELB/ALB/NLB\n      GCP Load Balancer\n      Azure Load Balancer\n      Cloudflare\n      Managed, scalable\n    Service Mesh\n      Istio\n      Linkerd\n      Consul\n      App-level routing</code></pre>"},{"location":"daily/2024-10-25/#quick-reference-tables","title":"Quick Reference Tables","text":""},{"location":"daily/2024-10-25/#when-to-use-what","title":"When to Use What?","text":"Scenario Solution Why? Caching layer with 100 servers Consistent Hashing Minimize cache invalidation on scale REST API servers Stateless + L7 LB Easy scaling, content routing WebSocket gaming server Stateful + L4 LB + Sticky sessions Maintain connection state Global CDN Multi-tier LB + Geo routing Low latency worldwide Database connection pool Consistent Hashing Reuse connections per shard Microservices routing Stateless + Service Mesh Dynamic routing, observability"},{"location":"daily/2024-10-25/#technology-stack-examples","title":"Technology Stack Examples","text":"Component Layer 4 Layer 7 Stateless Store AWS Network Load Balancer (NLB) Application Load Balancer (ALB) ElastiCache Redis GCP TCP/UDP Load Balancer HTTP(S) Load Balancer Cloud Memorystore Azure Load Balancer Application Gateway Azure Cache for Redis Open Source HAProxy (TCP mode) NGINX, HAProxy (HTTP mode) Redis Cluster"},{"location":"daily/2024-10-25/#practice-problems","title":"Practice Problems","text":"<ol> <li>Design Instagram's feed cache: Use consistent hashing to distribute user feeds across 500 cache servers</li> <li>Design Uber's matching service: Should it be stateful or stateless? Why?</li> <li>Design a global API: Use multi-tier load balancing (DNS \u2192 L4 \u2192 L7)</li> <li>Migrate from stateful to stateless: Plan the migration for a monolith with server-side sessions</li> </ol>"},{"location":"daily/2024-10-25/#resources","title":"Resources","text":"<ul> <li>Consistent Hashing Paper</li> <li>HAProxy Documentation</li> <li>NGINX Load Balancing Guide</li> </ul>"},{"location":"daily/2024-10-25/#reflections","title":"Reflections","text":"<p>Consistent hashing is brilliant - it's all about minimizing the blast radius when systems change. The virtual nodes trick ensures even distribution. Stateless architecture is the foundation of modern cloud-native apps - any server can die without data loss. Layer 7 load balancers are slower but give you powerful routing capabilities.</p>"},{"location":"daily/2024-10-25/#next-steps","title":"Next Steps","text":"<ul> <li>[ ] Implement consistent hashing in code</li> <li>[ ] Draw architecture for Twitter's timeline cache with consistent hashing</li> <li>[ ] Compare AWS ALB vs NLB for a specific use case</li> <li>[ ] Design session management for a stateless e-commerce app</li> </ul> <p>\u2190 Back to Daily Logs | Home</p>"},{"location":"daily/2024-10-29/","title":"Day 3 - October 29, 2024","text":""},{"location":"daily/2024-10-29/#topics-covered","title":"Topics Covered","text":"<ul> <li>The Three Pillars: Reliability, Scalability, and Maintainability</li> <li>Data-intensive application architecture</li> <li>Fault tolerance and redundancy patterns</li> <li>System design trade-offs</li> </ul>"},{"location":"daily/2024-10-29/#key-learnings","title":"Key Learnings","text":"<ul> <li>Reliability means working correctly even when things go wrong (fault tolerance)</li> <li>Scalability is about handling increased load without redesigning the system</li> <li>Maintainability enables engineers to work efficiently on the system over time</li> <li>These three concerns are non-functional requirements that drive every design decision</li> <li>Good architecture shows clear separation of concerns and modular design</li> </ul>"},{"location":"daily/2024-10-29/#the-foundation-three-pillars-of-data-systems","title":"The Foundation: Three Pillars of Data Systems","text":"<pre><code>mindmap\n  root((Data-Intensive&lt;br/&gt;Applications))\n    Reliability\n      Fault Tolerance\n      Redundancy\n      Graceful Degradation\n      Availability\n    Scalability\n      Horizontal Scaling\n      Load Handling\n      Performance\n      Bottleneck Identification\n    Maintainability\n      Operability\n      Simplicity\n      Evolvability\n      Abstractions</code></pre>"},{"location":"daily/2024-10-29/#data-intensive-application-architecture","title":"Data-Intensive Application Architecture","text":""},{"location":"daily/2024-10-29/#the-four-layer-model","title":"The Four-Layer Model","text":"<pre><code>graph LR\n    subgraph \"1. Data Sources\"\n        DS1[User Activity&lt;br/&gt;Clicks, Searches]\n        DS2[Transactions&lt;br/&gt;POS Systems]\n        DS3[IoT Sensors&lt;br/&gt;Real-time Data]\n        DS4[External APIs&lt;br/&gt;Third-party Services]\n    end\n\n    subgraph \"2. Processing Layer\"\n        P1[Batch Processing&lt;br/&gt;ETL Jobs]\n        P2[Stream Processing&lt;br/&gt;Real-time Analytics]\n        P3[Data Transformation&lt;br/&gt;Clean &amp; Enrich]\n    end\n\n    subgraph \"3. Storage Layer\"\n        S1[Data Warehouse&lt;br/&gt;Analytics]\n        S2[Data Lake&lt;br/&gt;Unstructured Data]\n        S3[Databases&lt;br/&gt;Transactional]\n        S4[Cache&lt;br/&gt;Fast Access]\n    end\n\n    subgraph \"4. Serving Layer\"\n        O1[BI Dashboard&lt;br/&gt;Business Insights]\n        O2[Search Engine&lt;br/&gt;Query Results]\n        O3[ML Models&lt;br/&gt;Recommendations]\n        O4[APIs&lt;br/&gt;Application Access]\n    end\n\n    DS1 &amp; DS2 &amp; DS3 &amp; DS4 --&gt; P1 &amp; P2 &amp; P3\n    P1 &amp; P2 &amp; P3 --&gt; S1 &amp; S2 &amp; S3 &amp; S4\n    S1 &amp; S2 &amp; S3 &amp; S4 --&gt; O1 &amp; O2 &amp; O3 &amp; O4\n\n    style DS1 fill:#e1f5ff\n    style P1 fill:#fff4e6\n    style S1 fill:#e8f5e9\n    style O1 fill:#f3e5f5</code></pre> <p>Restaurant Kitchen Analogy: - Data Sources = Raw ingredients from suppliers - Processing = Chefs washing, chopping, cooking - Storage = Refrigerators and prep stations - Serving = Plated dishes to customers</p>"},{"location":"daily/2024-10-29/#1-reliability-fault-tolerance","title":"1. Reliability (Fault Tolerance)","text":"<p>Definition: The system continues to work correctly, even when things go wrong</p>"},{"location":"daily/2024-10-29/#faults-vs-failures","title":"Faults vs Failures","text":"<pre><code>graph TB\n    Fault1[Hardware Fault&lt;br/&gt;Disk crash] --&gt; Tolerate1{Fault Tolerant?}\n    Tolerate1 --&gt;|Yes| Continue1[System Continues&lt;br/&gt;No user impact]\n    Tolerate1 --&gt;|No| Failure1[System Failure&lt;br/&gt;\u274c Service Down]\n\n    Fault2[Software Bug&lt;br/&gt;Memory leak] --&gt; Tolerate2{Fault Tolerant?}\n    Tolerate2 --&gt;|Yes| Continue2[Graceful Degradation&lt;br/&gt;Reduced functionality]\n    Tolerate2 --&gt;|No| Failure2[System Failure&lt;br/&gt;\u274c Crash]\n\n    Fault3[Network Issue&lt;br/&gt;Partition] --&gt; Tolerate3{Fault Tolerant?}\n    Tolerate3 --&gt;|Yes| Continue3[Operate on Cached Data&lt;br/&gt;Eventual consistency]\n    Tolerate3 --&gt;|No| Failure3[System Failure&lt;br/&gt;\u274c Timeout errors]\n\n    style Continue1 fill:#9f9\n    style Continue2 fill:#9f9\n    style Continue3 fill:#9f9\n    style Failure1 fill:#f99\n    style Failure2 fill:#f99\n    style Failure3 fill:#f99</code></pre> <p>Key Insight: Fault = One component failing | Failure = System unavailable to users</p>"},{"location":"daily/2024-10-29/#redundancy-pattern","title":"Redundancy Pattern","text":"<pre><code>graph TB\n    subgraph \"Single Point of Failure \u274c\"\n        Client1[Clients] --&gt; DB1[Single Database]\n        DB1 --&gt; X[If DB crashes:&lt;br/&gt;Entire system down]\n    end\n\n    subgraph \"Redundant Architecture \u2705\"\n        Client2[Clients] --&gt; LB[Load Balancer]\n        LB --&gt; App1[App Server 1]\n        LB --&gt; App2[App Server 2]\n        LB --&gt; App3[App Server 3]\n\n        App1 &amp; App2 &amp; App3 --&gt; Master[(Primary DB)]\n        Master -.-&gt;|Replication| Standby[(Standby DB)]\n\n        Master --&gt; Check{Primary Fails?}\n        Check --&gt;|Yes| Failover[Standby Promoted&lt;br/&gt;Service Continues]\n        Check --&gt;|No| Normal[Normal Operation]\n    end\n\n    style X fill:#f99\n    style Failover fill:#9f9\n    style Normal fill:#9f9</code></pre>"},{"location":"daily/2024-10-29/#types-of-faults","title":"Types of Faults","text":"<pre><code>graph TD\n    Faults[Types of Faults]\n\n    Faults --&gt; Hardware[Hardware Faults]\n    Hardware --&gt; H1[Disk failures]\n    Hardware --&gt; H2[Power outages]\n    Hardware --&gt; H3[Network issues]\n    Hardware --&gt; H4[RAM corruption]\n\n    Faults --&gt; Software[Software Faults]\n    Software --&gt; S1[Bugs and race conditions]\n    Software --&gt; S2[Memory leaks]\n    Software --&gt; S3[Cascading failures]\n    Software --&gt; S4[Corrupted data]\n\n    Faults --&gt; Human[Human Errors]\n    Human --&gt; HE1[Configuration mistakes]\n    Human --&gt; HE2[Deployment errors]\n    Human --&gt; HE3[Operational mistakes]\n    Human --&gt; HE4[Security breaches]\n\n    style Hardware fill:#ff9\n    style Software fill:#f9c\n    style Human fill:#fcf</code></pre>"},{"location":"daily/2024-10-29/#e-commerce-reliability-example","title":"E-commerce Reliability Example","text":"<pre><code>sequenceDiagram\n    participant User\n    participant LB as Load Balancer\n    participant App1 as App Server 1\n    participant App2 as App Server 2\n    participant DB as Primary DB\n    participant Standby as Standby DB\n\n    User-&gt;&gt;LB: Add item to cart\n    LB-&gt;&gt;App1: Route request\n    App1-&gt;&gt;DB: Write cart data\n    DB-&gt;&gt;Standby: Replicate data\n    DB--&gt;&gt;App1: Success\n    App1--&gt;&gt;User: \u2705 Item added\n\n    Note over App1: App1 crashes!\n\n    User-&gt;&gt;LB: Checkout\n    LB-&gt;&gt;App2: Route to healthy server\n    App2-&gt;&gt;DB: Read cart data\n    DB--&gt;&gt;App2: Cart data\n    App2--&gt;&gt;User: \u2705 Checkout successful\n\n    Note over User,App2: User never noticed App1 failure!</code></pre> <p>Reliability Goal: Customer completes purchase even if servers fail in the background</p>"},{"location":"daily/2024-10-29/#reliability-techniques","title":"Reliability Techniques","text":"Technique Description Example Replication Multiple copies of data Database replicas Redundancy Duplicate components Multiple servers Failover Automatic switchover Standby database promotion Circuit Breaker Prevent cascading failures Stop calling failed service Timeouts Don't wait forever 5-second request timeout Retry Logic Try again on transient errors Retry with exponential backoff Health Checks Detect failures early /health endpoint every 10s Graceful Degradation Reduced functionality vs total failure Show cached data if DB down"},{"location":"daily/2024-10-29/#2-scalability","title":"2. Scalability","text":"<p>Definition: The system can handle increased load without major redesign</p>"},{"location":"daily/2024-10-29/#load-parameters","title":"Load Parameters","text":"<pre><code>mindmap\n  root((Load&lt;br/&gt;Parameters))\n    Traffic\n      Requests per second\n      Concurrent users\n      Peak vs average load\n    Data Volume\n      Records in database\n      Size of datasets\n      Growth rate\n    Complexity\n      Computation intensity\n      Query complexity\n      Number of features</code></pre>"},{"location":"daily/2024-10-29/#identifying-bottlenecks","title":"Identifying Bottlenecks","text":"<pre><code>graph TB\n    Users[Growing Users&lt;br/&gt;10K \u2192 1M] --&gt; Q1{Where will&lt;br/&gt;system break?}\n\n    Q1 --&gt; Check1[Database?]\n    Check1 --&gt; Metric1[Slow queries&lt;br/&gt;High CPU]\n\n    Q1 --&gt; Check2[Application?]\n    Check2 --&gt; Metric2[High latency&lt;br/&gt;Memory issues]\n\n    Q1 --&gt; Check3[Network?]\n    Check3 --&gt; Metric3[Bandwidth saturated&lt;br/&gt;Packet loss]\n\n    Q1 --&gt; Check4[Storage?]\n    Check4 --&gt; Metric4[Disk I/O maxed&lt;br/&gt;Out of space]\n\n    Metric1 &amp; Metric2 &amp; Metric3 &amp; Metric4 --&gt; Solution[Scale the&lt;br/&gt;bottleneck layer]\n\n    style Users fill:#ff9\n    style Solution fill:#9f9</code></pre>"},{"location":"daily/2024-10-29/#horizontal-vs-vertical-scaling","title":"Horizontal vs Vertical Scaling","text":"<pre><code>graph LR\n    subgraph \"Vertical Scaling (Scale Up)\"\n        V1[Current Server&lt;br/&gt;4 cores, 16GB RAM] --&gt;|Upgrade| V2[Bigger Server&lt;br/&gt;32 cores, 256GB RAM]\n\n        VPros[\u2705 Simple&lt;br/&gt;\u2705 No code changes]\n        VCons[\u274c Hardware limits&lt;br/&gt;\u274c Expensive&lt;br/&gt;\u274c SPOF]\n    end\n\n    subgraph \"Horizontal Scaling (Scale Out)\"\n        LB[Load Balancer]\n        LB --&gt; H1[Server 1&lt;br/&gt;4 cores, 16GB]\n        LB --&gt; H2[Server 2&lt;br/&gt;4 cores, 16GB]\n        LB --&gt; H3[Server 3&lt;br/&gt;4 cores, 16GB]\n        LB --&gt; H4[Server 4&lt;br/&gt;4 cores, 16GB]\n\n        HPros[\u2705 No limits&lt;br/&gt;\u2705 Cost effective&lt;br/&gt;\u2705 Fault tolerant]\n        HCons[\u274c Complex&lt;br/&gt;\u274c State management&lt;br/&gt;\u274c Data consistency]\n    end\n\n    style V1 fill:#ff9\n    style V2 fill:#fc9\n    style H1 fill:#9f9\n    style H2 fill:#9f9\n    style H3 fill:#9f9\n    style H4 fill:#9f9</code></pre>"},{"location":"daily/2024-10-29/#modular-architecture-for-scalability","title":"Modular Architecture for Scalability","text":"<pre><code>graph TB\n    subgraph \"Monolithic (Hard to Scale)\"\n        Mono[Single Application&lt;br/&gt;User + Order + Payment + Inventory]\n        Mono --&gt; MonoDB[(Single Database)]\n\n        MonoProblem[\u274c Must scale everything&lt;br/&gt;\u274c One bottleneck affects all&lt;br/&gt;\u274c Tight coupling]\n    end\n\n    subgraph \"Microservices (Easy to Scale)\"\n        Gateway[API Gateway]\n\n        Gateway --&gt; UserSvc[User Service&lt;br/&gt;Can scale independently]\n        Gateway --&gt; OrderSvc[Order Service&lt;br/&gt;High traffic = scale this]\n        Gateway --&gt; PaySvc[Payment Service&lt;br/&gt;Low traffic = fewer instances]\n        Gateway --&gt; InvSvc[Inventory Service&lt;br/&gt;Scale based on need]\n\n        UserSvc --&gt; UserDB[(User DB)]\n        OrderSvc --&gt; OrderDB[(Order DB)]\n        PaySvc --&gt; PayDB[(Pay DB)]\n        InvSvc --&gt; InvDB[(Inv DB)]\n\n        MicroBenefit[\u2705 Scale components independently&lt;br/&gt;\u2705 Isolate failures&lt;br/&gt;\u2705 Technology flexibility]\n    end\n\n    style Mono fill:#f99\n    style UserSvc fill:#9f9\n    style OrderSvc fill:#9f9\n    style PaySvc fill:#9f9\n    style InvSvc fill:#9f9</code></pre>"},{"location":"daily/2024-10-29/#social-media-scalability-example","title":"Social Media Scalability Example","text":"<pre><code>graph TB\n    subgraph \"Small Scale: 10K Users\"\n        S_Users[10K Users] --&gt; S_LB[Load Balancer]\n        S_LB --&gt; S_App[2 App Servers]\n        S_App --&gt; S_DB[(1 Database)]\n    end\n\n    subgraph \"Medium Scale: 1M Users\"\n        M_Users[1M Users] --&gt; M_CDN[CDN]\n        M_CDN --&gt; M_LB[Load Balancer]\n        M_LB --&gt; M_App1[10 App Servers]\n        M_App1 --&gt; M_Cache[(Redis Cache)]\n        M_App1 --&gt; M_Master[(Primary DB)]\n        M_Master --&gt; M_Replica1[(Replica 1)]\n        M_Master --&gt; M_Replica2[(Replica 2)]\n    end\n\n    subgraph \"Large Scale: 100M Users\"\n        L_Users[100M Users] --&gt; L_DNS[Global DNS]\n        L_DNS --&gt; L_Region1[US Region]\n        L_DNS --&gt; L_Region2[EU Region]\n\n        L_Region1 --&gt; L_CDN1[CDN]\n        L_CDN1 --&gt; L_LB1[L4 LB]\n        L_LB1 --&gt; L_LB2[L7 LB]\n        L_LB2 --&gt; L_App[100 App Servers]\n        L_App --&gt; L_Cache[Redis Cluster&lt;br/&gt;50 nodes]\n        L_App --&gt; L_Shard1[(DB Shard 1)]\n        L_App --&gt; L_Shard2[(DB Shard 2)]\n        L_App --&gt; L_Shard3[(DB Shard 3)]\n        L_App --&gt; L_Shard4[(DB Shard 4)]\n    end\n\n    style S_Users fill:#9f9\n    style M_Users fill:#ff9\n    style L_Users fill:#f99</code></pre> <p>Key Insight: Scalability requires planning for each growth stage</p>"},{"location":"daily/2024-10-29/#performance-metrics","title":"Performance Metrics","text":"<pre><code>graph LR\n    subgraph \"Latency\"\n        L1[P50: 50ms&lt;br/&gt;Half of requests]\n        L2[P95: 200ms&lt;br/&gt;95% of requests]\n        L3[P99: 500ms&lt;br/&gt;99% of requests]\n        L4[P99.9: 2000ms&lt;br/&gt;99.9% of requests]\n    end\n\n    subgraph \"Throughput\"\n        T1[QPS: 10,000&lt;br/&gt;Queries per second]\n        T2[TPS: 5,000&lt;br/&gt;Transactions per second]\n        T3[RPS: 50,000&lt;br/&gt;Requests per second]\n    end\n\n    Note[Optimize for P99,&lt;br/&gt;not average!]\n\n    style L4 fill:#f99\n    style Note fill:#ff9</code></pre> <p>Why P99 matters: Amazon found 1% of slowest requests = most valuable customers (largest carts)</p>"},{"location":"daily/2024-10-29/#3-maintainability","title":"3. Maintainability","text":"<p>Definition: Engineers can work efficiently on the system over time</p>"},{"location":"daily/2024-10-29/#the-three-dimensions","title":"The Three Dimensions","text":"<pre><code>mindmap\n  root((Maintainability))\n    Operability\n      Easy to monitor\n      Good logging/metrics\n      Automated deployments\n      Self-healing systems\n    Simplicity\n      Clear abstractions\n      Minimal complexity\n      Good documentation\n      Consistent patterns\n    Evolvability\n      Easy to modify\n      Loosely coupled\n      Good test coverage\n      Backwards compatible</code></pre>"},{"location":"daily/2024-10-29/#good-vs-bad-architecture","title":"Good vs Bad Architecture","text":"<pre><code>graph TB\n    subgraph \"Bad: Tangled Spaghetti \u274c\"\n        B1[Frontend] --&gt; B2[Backend]\n        B2 --&gt; B3[Database]\n        B1 --&gt; B3\n        B2 --&gt; B4[Cache]\n        B1 --&gt; B4\n        B3 --&gt; B4\n        B4 --&gt; B2\n        B3 --&gt; B5[Queue]\n        B1 --&gt; B5\n\n        BProblem[Hard to understand&lt;br/&gt;Hard to change&lt;br/&gt;Bugs everywhere]\n    end\n\n    subgraph \"Good: Layered &amp; Clear \u2705\"\n        Layer1[Presentation Layer&lt;br/&gt;React UI]\n        Layer2[API Layer&lt;br/&gt;REST Endpoints]\n        Layer3[Business Logic&lt;br/&gt;Service Layer]\n        Layer4[Data Access&lt;br/&gt;Repository Pattern]\n        Layer5[Data Storage&lt;br/&gt;Database]\n\n        Layer1 --&gt; Layer2\n        Layer2 --&gt; Layer3\n        Layer3 --&gt; Layer4\n        Layer4 --&gt; Layer5\n\n        GBenefit[Clear separation&lt;br/&gt;Easy to test&lt;br/&gt;Easy to modify]\n    end\n\n    style B1 fill:#f99\n    style B2 fill:#f99\n    style B3 fill:#f99\n    style Layer1 fill:#9f9\n    style Layer3 fill:#9f9\n    style Layer5 fill:#9f9</code></pre>"},{"location":"daily/2024-10-29/#abstractions-in-action","title":"Abstractions in Action","text":"<pre><code>graph LR\n    subgraph \"Without Abstraction\"\n        Code1[Application Code] --&gt; SQL1[Direct SQL:&lt;br/&gt;SELECT * FROM users&lt;br/&gt;WHERE id = ?]\n        SQL1 --&gt; DB1[(PostgreSQL)]\n\n        Problem1[\u274c DB change = rewrite all queries&lt;br/&gt;\u274c No caching logic&lt;br/&gt;\u274c Scattered data access]\n    end\n\n    subgraph \"With Repository Pattern\"\n        Code2[Application Code] --&gt; Repo[UserRepository&lt;br/&gt;getUser(id)&lt;br/&gt;saveUser(user)]\n        Repo --&gt; Cache{Check Cache}\n        Cache --&gt;|Hit| Return1[Return from cache]\n        Cache --&gt;|Miss| DB2[(PostgreSQL)]\n        DB2 --&gt; UpdateCache[Update cache]\n\n        Benefit[\u2705 DB change = modify repository only&lt;br/&gt;\u2705 Caching centralized&lt;br/&gt;\u2705 Easy to test with mocks]\n    end\n\n    style Code1 fill:#f99\n    style Code2 fill:#9f9</code></pre>"},{"location":"daily/2024-10-29/#maintainability-practices","title":"Maintainability Practices","text":"Practice Description Benefit Logging Structured logs with context Debug production issues Metrics Track KPIs and health Early problem detection Monitoring Dashboards and alerts Know when things break Documentation Architecture diagrams, APIs Onboard new engineers fast Testing Unit, integration, E2E tests Confidence in changes Code Reviews Peer review all changes Catch bugs, share knowledge CI/CD Automated build and deploy Fast, reliable releases Feature Flags Toggle features on/off Safe rollouts, easy rollback"},{"location":"daily/2024-10-29/#technical-debt-management","title":"Technical Debt Management","text":"<pre><code>graph TD\n    Start[Make Design Decision] --&gt; Quick{Quick &amp; Dirty&lt;br/&gt;vs&lt;br/&gt;Proper Solution?}\n\n    Quick --&gt;|Quick Hack| Debt[Technical Debt&lt;br/&gt;Accumulates]\n    Quick --&gt;|Proper| Good[Maintainable Code]\n\n    Debt --&gt; Interest[Interest Compounds&lt;br/&gt;Slower development&lt;br/&gt;More bugs&lt;br/&gt;Team frustration]\n\n    Interest --&gt; Payoff{Pay Off Debt?}\n    Payoff --&gt;|Yes| Refactor[Refactor&lt;br/&gt;Improve Design]\n    Payoff --&gt;|No| Bankruptcy[System&lt;br/&gt;Bankruptcy&lt;br/&gt;Rewrite needed]\n\n    Refactor --&gt; Good\n    Good --&gt; Maintain[Easy to Maintain]\n\n    style Debt fill:#ff9\n    style Interest fill:#f99\n    style Bankruptcy fill:#f33\n    style Good fill:#9f9\n    style Maintain fill:#9f9</code></pre> <p>Golden Rule: It's easier to keep code clean than to clean up later</p>"},{"location":"daily/2024-10-29/#the-trade-off-triangle","title":"The Trade-off Triangle","text":"<pre><code>graph TB\n    Triangle[Design Decision]\n\n    Triangle --&gt; R[Reliability&lt;br/&gt;More redundancy&lt;br/&gt;Higher cost]\n    Triangle --&gt; S[Scalability&lt;br/&gt;More complexity&lt;br/&gt;Harder to maintain]\n    Triangle --&gt; M[Maintainability&lt;br/&gt;More abstractions&lt;br/&gt;Performance overhead]\n\n    R -.-&gt;|Trade-off| S\n    S -.-&gt;|Trade-off| M\n    M -.-&gt;|Trade-off| R\n\n    Balance[Find the Right Balance&lt;br/&gt;for Your Context]\n\n    style Triangle fill:#f9f\n    style Balance fill:#9f9</code></pre> <p>Context Matters: - Startup MVP: Prioritize speed \u2192 Maintainability can wait - Banking System: Prioritize reliability \u2192 Cost is secondary - Scaling Unicorn: Prioritize scalability \u2192 Invest in complexity - Mature Product: Prioritize maintainability \u2192 Long-term stability</p>"},{"location":"daily/2024-10-29/#real-world-examples","title":"Real-World Examples","text":""},{"location":"daily/2024-10-29/#netflix-all-three-pillars","title":"Netflix: All Three Pillars","text":"<pre><code>graph TB\n    subgraph \"Reliability: Chaos Engineering\"\n        R1[Intentionally&lt;br/&gt;Break Servers] --&gt; R2[Test Fault&lt;br/&gt;Tolerance]\n        R2 --&gt; R3[99.99% Uptime&lt;br/&gt;Despite Failures]\n    end\n\n    subgraph \"Scalability: Microservices\"\n        S1[200M Subscribers] --&gt; S2[1000+&lt;br/&gt;Microservices]\n        S2 --&gt; S3[Scale Components&lt;br/&gt;Independently]\n    end\n\n    subgraph \"Maintainability: DevOps Culture\"\n        M1[Engineers&lt;br/&gt;Own Services] --&gt; M2[Full Stack&lt;br/&gt;Responsibility]\n        M2 --&gt; M3[Fast Innovation&lt;br/&gt;Clear Ownership]\n    end\n\n    style R3 fill:#9f9\n    style S3 fill:#9f9\n    style M3 fill:#9f9</code></pre>"},{"location":"daily/2024-10-29/#amazon-customer-obsession-through-design","title":"Amazon: Customer Obsession Through Design","text":"Pillar Amazon's Approach Impact Reliability Multiple availability zones, redundant everything Customer can always buy Scalability Service-oriented architecture, auto-scaling Handle Prime Day traffic Maintainability Two-pizza teams, API-first design Fast feature development"},{"location":"daily/2024-10-29/#quick-reference-the-three-pillars","title":"Quick Reference: The Three Pillars","text":"Pillar Question to Ask Measure Techniques Reliability Does it work correctly, even when things go wrong? Uptime %, Error rate Redundancy, Replication, Failover Scalability Can it handle growth without redesign? Latency (P99), Throughput (QPS) Horizontal scaling, Sharding, Caching Maintainability Can engineers work efficiently? Time to fix bugs, Deploy frequency Abstractions, Testing, Documentation"},{"location":"daily/2024-10-29/#practice-problems","title":"Practice Problems","text":"<ol> <li>Design Twitter's timeline: How would you ensure reliability for 200M users?</li> <li>E-commerce checkout: What scalability challenges arise during Black Friday?</li> <li>Refactor Legacy System: How to improve maintainability without breaking production?</li> <li>Trade-off Analysis: When would you sacrifice reliability for faster time-to-market?</li> </ol>"},{"location":"daily/2024-10-29/#resources","title":"Resources","text":"<ul> <li>Designing Data-Intensive Applications by Martin Kleppmann</li> <li>Site Reliability Engineering by Google</li> <li>The Twelve-Factor App</li> </ul>"},{"location":"daily/2024-10-29/#reflections","title":"Reflections","text":"<p>The three pillars aren't just technical concerns - they're business imperatives. Reliability affects revenue (downtime = lost sales). Scalability affects growth (can't handle traffic = lose users). Maintainability affects speed (tech debt = slow innovation). Every design decision is a trade-off between these concerns. The key is understanding your context and choosing the right balance.</p>"},{"location":"daily/2024-10-29/#next-steps","title":"Next Steps","text":"<ul> <li>[ ] Read \"Designing Data-Intensive Applications\" Chapter 1</li> <li>[ ] Analyze a system you use: Which pillar is prioritized?</li> <li>[ ] Design a fault-tolerant database architecture</li> <li>[ ] Create a monitoring dashboard for a sample application</li> </ul> <p>\u2190 Back to Daily Logs | Home</p>"},{"location":"topics/","title":"System Design Topics","text":"<p>This section organizes system design concepts by theme for easy reference and review.</p>"},{"location":"topics/#available-guides","title":"Available Guides","text":"<ul> <li>Fundamental Building Blocks - Core components of distributed systems</li> <li>Interview Approach - How to ace FAANG system design interviews</li> <li>Scalability Patterns - Proven patterns to scale from 1K to 10M+ users</li> </ul>"},{"location":"topics/#core-concepts","title":"Core Concepts","text":""},{"location":"topics/#scalability","title":"Scalability","text":"<ul> <li>Horizontal vs Vertical Scaling</li> <li>Load Balancing</li> <li>Caching Strategies</li> <li>Content Delivery Networks (CDN)</li> </ul>"},{"location":"topics/#data-storage","title":"Data Storage","text":"<ul> <li>SQL vs NoSQL</li> <li>Database Sharding</li> <li>Replication and Partitioning</li> <li>Data Consistency Models</li> </ul>"},{"location":"topics/#system-architecture","title":"System Architecture","text":"<ul> <li>Microservices vs Monolithic</li> <li>Event-Driven Architecture</li> <li>Message Queues</li> <li>API Design (REST, GraphQL, gRPC)</li> </ul>"},{"location":"topics/#performance","title":"Performance","text":"<ul> <li>Latency vs Throughput</li> <li>Caching Layers</li> <li>Indexing Strategies</li> <li>Database Optimization</li> </ul>"},{"location":"topics/#reliability","title":"Reliability","text":"<ul> <li>High Availability</li> <li>Fault Tolerance</li> <li>Disaster Recovery</li> <li>Monitoring and Observability</li> </ul>"},{"location":"topics/#security","title":"Security","text":"<ul> <li>Authentication and Authorization</li> <li>Rate Limiting</li> <li>Data Encryption</li> <li>DDoS Protection</li> </ul>"},{"location":"topics/#common-system-design-patterns","title":"Common System Design Patterns","text":"<ul> <li>Load Balancer Pattern</li> <li>Cache-Aside Pattern</li> <li>CQRS (Command Query Responsibility Segregation)</li> <li>Event Sourcing</li> <li>Circuit Breaker</li> <li>Saga Pattern</li> <li>Database Per Service</li> </ul>"},{"location":"topics/#real-world-system-designs","title":"Real-World System Designs","text":"<p>This section will grow with case studies of popular systems</p> <ul> <li>URL Shortener (like bit.ly)</li> <li>Social Media Feed (like Twitter/X)</li> <li>Video Streaming Platform (like YouTube)</li> <li>E-commerce Platform (like Amazon)</li> <li>Ride-Sharing Service (like Uber)</li> <li>Chat Application (like WhatsApp)</li> <li>File Storage System (like Dropbox)</li> </ul> <p>\u2190 Back to Home</p>"},{"location":"topics/building-blocks/","title":"Fundamental Building Blocks of Distributed Systems","text":"<p>The core components that power large-scale systems.</p>"},{"location":"topics/building-blocks/#system-architecture-overview","title":"System Architecture Overview","text":"<pre><code>graph TB\n    subgraph \"Client Layer\"\n        C1[Web Browser]\n        C2[Mobile App]\n        C3[API Client]\n    end\n\n    subgraph \"Edge Layer\"\n        CDN[CDN]\n        LB[Load Balancer]\n    end\n\n    subgraph \"Application Layer\"\n        API1[API Server 1]\n        API2[API Server 2]\n        API3[API Server 3]\n        Cache[(Cache)]\n    end\n\n    subgraph \"Data Layer\"\n        DB1[(Primary DB)]\n        DB2[(Replica DB)]\n        MQ[Message Queue]\n    end\n\n    subgraph \"Storage Layer\"\n        S3[Object Storage]\n        FS[File System]\n    end\n\n    C1 &amp; C2 &amp; C3 --&gt; CDN\n    CDN --&gt; LB\n    LB --&gt; API1 &amp; API2 &amp; API3\n    API1 &amp; API2 &amp; API3 --&gt; Cache\n    API1 &amp; API2 &amp; API3 --&gt; DB1\n    DB1 --&gt; DB2\n    API1 &amp; API2 &amp; API3 --&gt; MQ\n    API1 &amp; API2 &amp; API3 --&gt; S3</code></pre>"},{"location":"topics/building-blocks/#1-load-balancers","title":"1. Load Balancers","text":"<p>Distribute traffic across multiple servers.</p> <pre><code>graph LR\n    Client[Client Requests] --&gt; LB{Load Balancer}\n    LB --&gt;|Round Robin| S1[Server 1]\n    LB --&gt;|Least Connections| S2[Server 2]\n    LB --&gt;|IP Hash| S3[Server 3]\n\n    style LB fill:#f9f,stroke:#333,stroke-width:4px</code></pre> <p>Key Algorithms: - Round Robin: Distribute evenly - Least Connections: Route to least busy server - IP Hash: Consistent routing per client</p>"},{"location":"topics/building-blocks/#2-caching-layers","title":"2. Caching Layers","text":"<pre><code>graph TD\n    Request[Client Request] --&gt; CDN{CDN Cache Hit?}\n    CDN --&gt;|Yes| Return1[Return Data]\n    CDN --&gt;|No| AppCache{App Cache Hit?}\n    AppCache --&gt;|Yes| Return2[Return Data]\n    AppCache --&gt;|No| DB[(Database)]\n    DB --&gt; AppCache\n    AppCache --&gt; CDN\n\n    style CDN fill:#9cf\n    style AppCache fill:#9cf</code></pre> <p>Cache Levels: - CDN: Static assets (images, CSS, JS) - Application: Session data, API responses - Database: Query results</p>"},{"location":"topics/building-blocks/#3-database-patterns","title":"3. Database Patterns","text":""},{"location":"topics/building-blocks/#master-replica-replication","title":"Master-Replica Replication","text":"<pre><code>graph TB\n    App[Application Servers]\n    App --&gt;|Write| Master[(Master DB)]\n    App --&gt;|Read| R1[(Replica 1)]\n    App --&gt;|Read| R2[(Replica 2)]\n    App --&gt;|Read| R3[(Replica 3)]\n\n    Master -.-&gt;|Replicate| R1\n    Master -.-&gt;|Replicate| R2\n    Master -.-&gt;|Replicate| R3\n\n    style Master fill:#f96,stroke:#333,stroke-width:3px\n    style R1 fill:#9f9\n    style R2 fill:#9f9\n    style R3 fill:#9f9</code></pre>"},{"location":"topics/building-blocks/#database-sharding","title":"Database Sharding","text":"<pre><code>graph TB\n    App[Application] --&gt; Router{Shard Router}\n\n    Router --&gt;|Users A-M| S1[(Shard 1&lt;br/&gt;A-M)]\n    Router --&gt;|Users N-Z| S2[(Shard 2&lt;br/&gt;N-Z)]\n    Router --&gt;|Users 0-9| S3[(Shard 3&lt;br/&gt;0-9)]\n\n    style Router fill:#ff9,stroke:#333,stroke-width:3px</code></pre> <p>Sharding Strategies: - Range-based (A-M, N-Z) - Hash-based (user_id % num_shards) - Geographic (US, EU, ASIA)</p>"},{"location":"topics/building-blocks/#4-message-queues","title":"4. Message Queues","text":"<p>Asynchronous processing and decoupling.</p> <pre><code>sequenceDiagram\n    participant Client\n    participant API\n    participant Queue\n    participant Worker\n    participant DB\n\n    Client-&gt;&gt;API: Upload Video\n    API-&gt;&gt;Queue: Add to processing queue\n    API--&gt;&gt;Client: 202 Accepted (Job ID)\n\n    Worker-&gt;&gt;Queue: Poll for jobs\n    Queue--&gt;&gt;Worker: Video processing task\n    Worker-&gt;&gt;Worker: Transcode video\n    Worker-&gt;&gt;DB: Update status\n    Worker-&gt;&gt;Client: Webhook notification</code></pre> <p>Use Cases: - Video/image processing - Email delivery - Report generation - Background tasks</p>"},{"location":"topics/building-blocks/#5-microservices-communication","title":"5. Microservices Communication","text":"<pre><code>graph TB\n    Gateway[API Gateway]\n\n    Gateway --&gt; Auth[Auth Service]\n    Gateway --&gt; User[User Service]\n    Gateway --&gt; Order[Order Service]\n    Gateway --&gt; Payment[Payment Service]\n\n    Order --&gt; MQ[Message Queue]\n    Payment --&gt; MQ\n\n    Auth --&gt; AuthDB[(Auth DB)]\n    User --&gt; UserDB[(User DB)]\n    Order --&gt; OrderDB[(Order DB)]\n    Payment --&gt; PayDB[(Payment DB)]\n\n    style Gateway fill:#f9f,stroke:#333,stroke-width:3px</code></pre> <p>Key Patterns: - API Gateway: Single entry point - Service Discovery: Find service instances - Circuit Breaker: Handle failures gracefully</p>"},{"location":"topics/building-blocks/#6-cdn-content-delivery-network","title":"6. CDN (Content Delivery Network)","text":"<pre><code>graph TB\n    User1[User in US] --&gt; CDN_US[CDN Edge&lt;br/&gt;US East]\n    User2[User in EU] --&gt; CDN_EU[CDN Edge&lt;br/&gt;EU West]\n    User3[User in Asia] --&gt; CDN_ASIA[CDN Edge&lt;br/&gt;Singapore]\n\n    CDN_US -.-&gt;|Cache Miss| Origin[Origin Server]\n    CDN_EU -.-&gt;|Cache Miss| Origin\n    CDN_ASIA -.-&gt;|Cache Miss| Origin\n\n    Origin --&gt; S3[(Object Storage)]\n\n    style Origin fill:#f96\n    style CDN_US fill:#9cf\n    style CDN_EU fill:#9cf\n    style CDN_ASIA fill:#9cf</code></pre> <p>Benefits: - Reduced latency (serve from nearby edge) - Reduced load on origin servers - DDoS protection</p>"},{"location":"topics/building-blocks/#7-data-flow-example-social-media-post","title":"7. Data Flow Example: Social Media Post","text":"<pre><code>sequenceDiagram\n    participant User\n    participant LB as Load Balancer\n    participant API as API Server\n    participant Cache\n    participant DB as Database\n    participant Queue as Message Queue\n    participant Worker\n\n    User-&gt;&gt;LB: POST /create-post\n    LB-&gt;&gt;API: Route request\n    API-&gt;&gt;DB: Save post\n    DB--&gt;&gt;API: Post saved (ID: 123)\n\n    API-&gt;&gt;Cache: Invalidate user feed cache\n    API-&gt;&gt;Queue: Notify followers\n    API--&gt;&gt;User: 201 Created\n\n    Worker-&gt;&gt;Queue: Poll notifications\n    Queue--&gt;&gt;Worker: Fan out to followers\n    Worker-&gt;&gt;DB: Update follower feeds</code></pre>"},{"location":"topics/building-blocks/#key-takeaways","title":"Key Takeaways","text":"Component Purpose When to Use Load Balancer Distribute traffic Multiple servers Cache Speed up reads Repeated requests Replicas Scale reads Read-heavy workload Sharding Scale writes Write-heavy workload Message Queue Async processing Time-consuming tasks CDN Serve static files Global users <p>\u2190 Back to Topics | Home</p>"},{"location":"topics/interview-approach/","title":"System Design Interview Approach","text":"<p>How FAANG companies evaluate system design skills.</p>"},{"location":"topics/interview-approach/#interview-flow","title":"Interview Flow","text":"<pre><code>graph LR\n    A[Clarify Requirements&lt;br/&gt;5-10 min] --&gt; B[High-Level Design&lt;br/&gt;10-15 min]\n    B --&gt; C[Deep Dive&lt;br/&gt;15-20 min]\n    C --&gt; D[Bottlenecks &amp; Trade-offs&lt;br/&gt;5-10 min]\n\n    style A fill:#9cf\n    style B fill:#9f9\n    style C fill:#ff9\n    style D fill:#f9c</code></pre>"},{"location":"topics/interview-approach/#step-1-requirements-clarification","title":"Step 1: Requirements Clarification","text":"<pre><code>mindmap\n  root((Requirements))\n    Functional\n      Core features?\n      User actions?\n      API endpoints?\n    Non-Functional\n      Scale (Users/QPS)?\n      Latency targets?\n      Consistency needs?\n    Constraints\n      Budget?\n      Technology stack?\n      Timeline?</code></pre> <p>Key Questions to Ask: - How many users? (DAU/MAU) - Read vs Write ratio? - Peak traffic patterns? - Data retention period? - Geographic distribution?</p>"},{"location":"topics/interview-approach/#step-2-capacity-estimation","title":"Step 2: Capacity Estimation","text":"<pre><code>graph TB\n    Start[Requirements] --&gt; Users[Users&lt;br/&gt;100M DAU]\n    Users --&gt; Requests[Requests&lt;br/&gt;10 actions/user/day]\n    Requests --&gt; QPS[QPS Calculation&lt;br/&gt;100M \u00d7 10 / 86400]\n    QPS --&gt; Result[~12K QPS&lt;br/&gt;Peak: 36K QPS]\n\n    Start --&gt; Data[Data Volume]\n    Data --&gt; Storage[Storage Calc&lt;br/&gt;1KB per action]\n    Storage --&gt; Total[Daily: ~1TB&lt;br/&gt;Yearly: ~365TB]\n\n    style Result fill:#9f9\n    style Total fill:#9f9</code></pre> <p>Back-of-envelope Math: - QPS = (DAU \u00d7 actions) / 86,400 - Peak QPS = Average QPS \u00d7 3 - Storage = QPS \u00d7 data_size \u00d7 seconds_per_day</p>"},{"location":"topics/interview-approach/#step-3-api-design","title":"Step 3: API Design","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant API Gateway\n    participant Service\n\n    Note over Client,Service: POST /api/v1/posts\n    Client-&gt;&gt;API Gateway: Create Post\n    API Gateway-&gt;&gt;Service: Forward request\n    Service--&gt;&gt;API Gateway: 201 Created {id: 123}\n    API Gateway--&gt;&gt;Client: Response\n\n    Note over Client,Service: GET /api/v1/feed?user_id=456\n    Client-&gt;&gt;API Gateway: Get Feed\n    API Gateway-&gt;&gt;Service: Forward request\n    Service--&gt;&gt;API Gateway: 200 OK {posts: [...]}\n    API Gateway--&gt;&gt;Client: Response</code></pre> <p>Define Key APIs Early: - <code>POST /posts</code> - Create content - <code>GET /feed</code> - Retrieve content - <code>PUT /posts/:id</code> - Update content - <code>DELETE /posts/:id</code> - Remove content</p>"},{"location":"topics/interview-approach/#step-4-high-level-design","title":"Step 4: High-Level Design","text":"<pre><code>graph TB\n    Client[Clients] --&gt; DNS[DNS]\n    DNS --&gt; CDN[CDN]\n    CDN --&gt; LB[Load Balancer]\n\n    LB --&gt; API1[API Server]\n    LB --&gt; API2[API Server]\n\n    API1 &amp; API2 --&gt; Cache[(Redis Cache)]\n    API1 &amp; API2 --&gt; DB[(Primary DB)]\n\n    DB --&gt; Replica1[(Replica)]\n    DB --&gt; Replica2[(Replica)]\n\n    API1 &amp; API2 --&gt; Queue[Message Queue]\n    Queue --&gt; Worker1[Worker]\n    Queue --&gt; Worker2[Worker]\n\n    Worker1 &amp; Worker2 --&gt; Storage[(Object Storage)]\n\n    style LB fill:#f9f\n    style Cache fill:#9cf\n    style Queue fill:#ff9</code></pre> <p>Start Simple, Then Iterate: 1. Client \u2192 Server \u2192 Database 2. Add load balancer (multiple servers) 3. Add caching layer 4. Add database replicas 5. Add message queues for async tasks</p>"},{"location":"topics/interview-approach/#step-5-deep-dive-areas","title":"Step 5: Deep Dive Areas","text":"<pre><code>mindmap\n  root((Deep Dive&lt;br/&gt;Topics))\n    Scalability\n      Horizontal scaling\n      Database sharding\n      Caching strategy\n    Performance\n      Query optimization\n      Index design\n      CDN usage\n    Reliability\n      Failover handling\n      Data replication\n      Backup strategy\n    Security\n      Authentication\n      Rate limiting\n      Data encryption</code></pre> <p>Interviewer May Ask: - \"How do you handle 10x traffic?\" - \"What if the cache fails?\" - \"How do you ensure consistency?\" - \"What about data privacy?\"</p>"},{"location":"topics/interview-approach/#step-6-bottleneck-analysis","title":"Step 6: Bottleneck Analysis","text":"<pre><code>graph TB\n    subgraph \"Identify Bottlenecks\"\n        B1[Database writes&lt;br/&gt;Too slow?]\n        B2[Memory cache&lt;br/&gt;Insufficient?]\n        B3[Single point&lt;br/&gt;of failure?]\n        B4[Network&lt;br/&gt;bandwidth?]\n    end\n\n    subgraph \"Solutions\"\n        S1[Add write sharding&lt;br/&gt;Message queue]\n        S2[Scale cache tier&lt;br/&gt;Multiple Redis clusters]\n        S3[Add redundancy&lt;br/&gt;Multi-region deployment]\n        S4[Use CDN&lt;br/&gt;Compress data]\n    end\n\n    B1 --&gt; S1\n    B2 --&gt; S2\n    B3 --&gt; S3\n    B4 --&gt; S4\n\n    style B1 fill:#f99\n    style B2 fill:#f99\n    style B3 fill:#f99\n    style B4 fill:#f99\n    style S1 fill:#9f9\n    style S2 fill:#9f9\n    style S3 fill:#9f9\n    style S4 fill:#9f9</code></pre>"},{"location":"topics/interview-approach/#trade-offs-discussion","title":"Trade-offs Discussion","text":"<pre><code>graph LR\n    subgraph \"Consistency vs Availability\"\n        C1[Strong Consistency&lt;br/&gt;SQL, ACID]\n        C2[Eventual Consistency&lt;br/&gt;NoSQL, BASE]\n    end\n\n    subgraph \"Latency vs Accuracy\"\n        L1[Real-time&lt;br/&gt;Approximate counts]\n        L2[Batch Processing&lt;br/&gt;Exact counts]\n    end\n\n    subgraph \"Cost vs Performance\"\n        P1[Premium Tier&lt;br/&gt;Low latency]\n        P2[Standard Tier&lt;br/&gt;Higher latency]\n    end\n\n    style C1 fill:#9cf\n    style C2 fill:#fc9\n    style L1 fill:#9cf\n    style L2 fill:#fc9\n    style P1 fill:#9cf\n    style P2 fill:#fc9</code></pre> <p>Common Trade-offs: - CAP Theorem: Consistency vs Availability vs Partition Tolerance - Latency vs Consistency: Fast reads vs accurate data - Storage vs Compute: Denormalization vs joins - Cost vs Performance: Premium infrastructure vs budget constraints</p>"},{"location":"topics/interview-approach/#evaluation-criteria","title":"Evaluation Criteria","text":"<pre><code>graph TB\n    Score[Interview Score]\n\n    Score --&gt; C1[Clarity of Thought&lt;br/&gt;30%]\n    Score --&gt; C2[Technical Depth&lt;br/&gt;30%]\n    Score --&gt; C3[Trade-off Analysis&lt;br/&gt;20%]\n    Score --&gt; C4[Communication&lt;br/&gt;20%]\n\n    C1 --&gt; R1[Clear requirements&lt;br/&gt;Structured approach]\n    C2 --&gt; R2[Component knowledge&lt;br/&gt;Scalability solutions]\n    C3 --&gt; R3[Pros/cons discussion&lt;br/&gt;Alternative approaches]\n    C4 --&gt; R4[Explain clearly&lt;br/&gt;Ask good questions]\n\n    style Score fill:#f9f,stroke:#333,stroke-width:4px</code></pre>"},{"location":"topics/interview-approach/#common-mistakes-to-avoid","title":"Common Mistakes to Avoid","text":"<pre><code>graph TD\n    M1[\u274c Jumping to solution&lt;br/&gt;without clarifying]\n    M2[\u274c Over-engineering&lt;br/&gt;from the start]\n    M3[\u274c Ignoring constraints&lt;br/&gt;and scale]\n    M4[\u274c Not discussing&lt;br/&gt;trade-offs]\n    M5[\u274c Poor time&lt;br/&gt;management]\n\n    M1 --&gt; F1[\u2705 Ask questions first]\n    M2 --&gt; F2[\u2705 Start simple]\n    M3 --&gt; F3[\u2705 Calculate capacity]\n    M4 --&gt; F4[\u2705 Explain alternatives]\n    M5 --&gt; F5[\u2705 Watch the clock]\n\n    style M1 fill:#f99\n    style M2 fill:#f99\n    style M3 fill:#f99\n    style M4 fill:#f99\n    style M5 fill:#f99\n    style F1 fill:#9f9\n    style F2 fill:#9f9\n    style F3 fill:#9f9\n    style F4 fill:#9f9\n    style F5 fill:#9f9</code></pre>"},{"location":"topics/interview-approach/#interview-time-management","title":"Interview Time Management","text":"<pre><code>gantt\n    title 45-Minute System Design Interview\n    dateFormat mm:ss\n    axisFormat %M:%S\n\n    section Phase 1\n    Requirements &amp; Clarification :00:00, 10m\n\n    section Phase 2\n    High-Level Design :10:00, 15m\n\n    section Phase 3\n    Deep Dive Components :25:00, 12m\n\n    section Phase 4\n    Bottlenecks &amp; Wrap-up :37:00, 8m</code></pre>"},{"location":"topics/interview-approach/#practice-problems-by-difficulty","title":"Practice Problems by Difficulty","text":"<pre><code>graph TB\n    subgraph Easy\n        E1[URL Shortener]\n        E2[Pastebin]\n        E3[Key-Value Store]\n    end\n\n    subgraph Medium\n        M1[Twitter Feed]\n        M2[Instagram]\n        M3[Uber]\n    end\n\n    subgraph Hard\n        H1[Google Search]\n        H2[Netflix]\n        H3[WhatsApp]\n    end\n\n    Easy --&gt; Medium --&gt; Hard\n\n    style Easy fill:#9f9\n    style Medium fill:#ff9\n    style Hard fill:#f99</code></pre>"},{"location":"topics/interview-approach/#key-takeaways","title":"Key Takeaways","text":"<ol> <li>Always clarify first - Don't assume requirements</li> <li>Start simple - Build incrementally</li> <li>Numbers matter - Do back-of-envelope calculations</li> <li>Think out loud - Communicate your reasoning</li> <li>Discuss trade-offs - There's no perfect solution</li> <li>Practice regularly - Muscle memory is key</li> </ol> <p>\u2190 Back to Topics | Home</p>"},{"location":"topics/scalability-patterns/","title":"Common Scalability Patterns","text":"<p>Proven approaches to scale systems from thousands to millions of users.</p>"},{"location":"topics/scalability-patterns/#scaling-journey-overview","title":"Scaling Journey Overview","text":"<pre><code>graph LR\n    S1[1K Users&lt;br/&gt;Single Server] --&gt; S2[10K Users&lt;br/&gt;Add Cache + DB]\n    S2 --&gt; S3[100K Users&lt;br/&gt;Load Balancer&lt;br/&gt;+ Replicas]\n    S3 --&gt; S4[1M Users&lt;br/&gt;Sharding&lt;br/&gt;+ CDN]\n    S4 --&gt; S5[10M+ Users&lt;br/&gt;Microservices&lt;br/&gt;+ Multi-region]\n\n    style S1 fill:#9f9\n    style S2 fill:#9cf\n    style S3 fill:#ff9\n    style S4 fill:#f9c\n    style S5 fill:#f9f</code></pre>"},{"location":"topics/scalability-patterns/#pattern-1-vertical-scaling-scale-up","title":"Pattern 1: Vertical Scaling (Scale Up)","text":"<pre><code>graph TB\n    subgraph \"Before: Small Server\"\n        B1[4 CPU cores&lt;br/&gt;8 GB RAM&lt;br/&gt;100 GB SSD]\n    end\n\n    subgraph \"After: Bigger Server\"\n        A1[16 CPU cores&lt;br/&gt;64 GB RAM&lt;br/&gt;1 TB SSD]\n    end\n\n    B1 -.-&gt;|Upgrade| A1\n\n    style B1 fill:#ff9\n    style A1 fill:#9f9</code></pre> <p>Pros: Simple, no code changes Cons: Hardware limits, single point of failure, expensive Use When: Early stage, quick fix needed</p>"},{"location":"topics/scalability-patterns/#pattern-2-horizontal-scaling-scale-out","title":"Pattern 2: Horizontal Scaling (Scale Out)","text":"<pre><code>graph TB\n    LB[Load Balancer]\n\n    LB --&gt; S1[Server 1&lt;br/&gt;4 cores, 8GB]\n    LB --&gt; S2[Server 2&lt;br/&gt;4 cores, 8GB]\n    LB --&gt; S3[Server 3&lt;br/&gt;4 cores, 8GB]\n    LB --&gt; S4[Server 4&lt;br/&gt;4 cores, 8GB]\n\n    style LB fill:#f9f,stroke:#333,stroke-width:3px\n    style S1 fill:#9f9\n    style S2 fill:#9f9\n    style S3 fill:#9f9\n    style S4 fill:#9f9</code></pre> <p>Pros: No limits, redundancy, cost-effective Cons: Complexity, stateless requirements Use When: Growth expected, high availability needed</p>"},{"location":"topics/scalability-patterns/#pattern-3-caching-strategy","title":"Pattern 3: Caching Strategy","text":""},{"location":"topics/scalability-patterns/#cache-aside-pattern","title":"Cache Aside Pattern","text":"<pre><code>sequenceDiagram\n    participant App\n    participant Cache\n    participant DB\n\n    App-&gt;&gt;Cache: Get(key)\n    alt Cache Hit\n        Cache--&gt;&gt;App: Return value\n    else Cache Miss\n        Cache--&gt;&gt;App: null\n        App-&gt;&gt;DB: Query\n        DB--&gt;&gt;App: Data\n        App-&gt;&gt;Cache: Set(key, data)\n    end</code></pre>"},{"location":"topics/scalability-patterns/#write-through-cache","title":"Write-Through Cache","text":"<pre><code>sequenceDiagram\n    participant App\n    participant Cache\n    participant DB\n\n    App-&gt;&gt;Cache: Write(key, value)\n    Cache-&gt;&gt;DB: Write to DB\n    DB--&gt;&gt;Cache: Ack\n    Cache--&gt;&gt;App: Success</code></pre>"},{"location":"topics/scalability-patterns/#cache-layers","title":"Cache Layers","text":"<pre><code>graph TB\n    Request[Request] --&gt; L1{Browser Cache}\n    L1 --&gt;|Miss| L2{CDN Cache}\n    L2 --&gt;|Miss| L3{Server Cache&lt;br/&gt;Redis/Memcached}\n    L3 --&gt;|Miss| L4{DB Query Cache}\n    L4 --&gt;|Miss| DB[(Database)]\n\n    style L1 fill:#9cf\n    style L2 fill:#9cf\n    style L3 fill:#9cf\n    style L4 fill:#9cf</code></pre>"},{"location":"topics/scalability-patterns/#pattern-4-database-replication","title":"Pattern 4: Database Replication","text":""},{"location":"topics/scalability-patterns/#master-slave-replication","title":"Master-Slave Replication","text":"<pre><code>graph TB\n    App[Application]\n\n    App --&gt;|Writes| M[(Master)]\n    App --&gt;|Reads| R1[(Slave 1)]\n    App --&gt;|Reads| R2[(Slave 2)]\n    App --&gt;|Reads| R3[(Slave 3)]\n\n    M -.-&gt;|Async Replication| R1\n    M -.-&gt;|Async Replication| R2\n    M -.-&gt;|Async Replication| R3\n\n    style M fill:#f96,stroke:#333,stroke-width:3px\n    style R1 fill:#9f9\n    style R2 fill:#9f9\n    style R3 fill:#9f9</code></pre> <p>Read/Write Split: - Master: Handle all writes - Slaves: Handle read queries - Ratio: Often 90% reads, 10% writes</p>"},{"location":"topics/scalability-patterns/#pattern-5-database-sharding","title":"Pattern 5: Database Sharding","text":""},{"location":"topics/scalability-patterns/#horizontal-partitioning","title":"Horizontal Partitioning","text":"<pre><code>graph TB\n    Router{Shard Router&lt;br/&gt;Hash user_id}\n\n    Router --&gt;|user_id % 4 = 0| S0[(Shard 0&lt;br/&gt;Users 0,4,8...)]\n    Router --&gt;|user_id % 4 = 1| S1[(Shard 1&lt;br/&gt;Users 1,5,9...)]\n    Router --&gt;|user_id % 4 = 2| S2[(Shard 2&lt;br/&gt;Users 2,6,10...)]\n    Router --&gt;|user_id % 4 = 3| S3[(Shard 3&lt;br/&gt;Users 3,7,11...)]\n\n    style Router fill:#f9f,stroke:#333,stroke-width:3px</code></pre>"},{"location":"topics/scalability-patterns/#geographic-sharding","title":"Geographic Sharding","text":"<pre><code>graph TB\n    Router{Geographic Router}\n\n    Router --&gt;|NA Users| US[(US Shard&lt;br/&gt;North America)]\n    Router --&gt;|EU Users| EU[(EU Shard&lt;br/&gt;Europe)]\n    Router --&gt;|APAC Users| ASIA[(ASIA Shard&lt;br/&gt;Asia Pacific)]\n\n    style Router fill:#f9f,stroke:#333,stroke-width:3px\n    style US fill:#9cf\n    style EU fill:#9cf\n    style ASIA fill:#9cf</code></pre>"},{"location":"topics/scalability-patterns/#pattern-6-microservices-decomposition","title":"Pattern 6: Microservices Decomposition","text":""},{"location":"topics/scalability-patterns/#monolith-vs-microservices","title":"Monolith vs Microservices","text":"<pre><code>graph TB\n    subgraph \"Monolith\"\n        M[Single Application&lt;br/&gt;User + Order + Payment&lt;br/&gt;+ Inventory]\n        M --&gt; MDB[(Single DB)]\n    end\n\n    subgraph \"Microservices\"\n        GW[API Gateway]\n        GW --&gt; US[User Service]\n        GW --&gt; OS[Order Service]\n        GW --&gt; PS[Payment Service]\n        GW --&gt; IS[Inventory Service]\n\n        US --&gt; UD[(User DB)]\n        OS --&gt; OD[(Order DB)]\n        PS --&gt; PD[(Payment DB)]\n        IS --&gt; ID[(Inventory DB)]\n    end\n\n    style M fill:#f99\n    style GW fill:#9f9</code></pre> <p>When to Use Microservices: - Large team (&gt;50 engineers) - Independent scaling needs - Different technology stacks - Domain complexity</p>"},{"location":"topics/scalability-patterns/#pattern-7-event-driven-architecture","title":"Pattern 7: Event-Driven Architecture","text":"<pre><code>sequenceDiagram\n    participant Order Service\n    participant Event Bus\n    participant Payment Service\n    participant Inventory Service\n    participant Notification Service\n\n    Order Service-&gt;&gt;Event Bus: OrderCreated Event\n    Event Bus-&gt;&gt;Payment Service: Process Payment\n    Event Bus-&gt;&gt;Inventory Service: Reserve Items\n    Event Bus-&gt;&gt;Notification Service: Send Confirmation\n\n    Payment Service-&gt;&gt;Event Bus: PaymentCompleted\n    Inventory Service-&gt;&gt;Event Bus: ItemsReserved\n    Notification Service-&gt;&gt;Event Bus: EmailSent</code></pre> <p>Benefits: - Loose coupling - Async processing - Easy to add new consumers - Event replay capability</p>"},{"location":"topics/scalability-patterns/#pattern-8-cqrs-command-query-responsibility-segregation","title":"Pattern 8: CQRS (Command Query Responsibility Segregation)","text":"<pre><code>graph TB\n    subgraph \"Write Side (Commands)\"\n        WC[Write Commands] --&gt; WDB[(Write DB&lt;br/&gt;Normalized)]\n        WDB --&gt; ES[Event Stream]\n    end\n\n    subgraph \"Read Side (Queries)\"\n        ES --&gt; R1[(Read Model 1&lt;br/&gt;Denormalized)]\n        ES --&gt; R2[(Read Model 2&lt;br/&gt;Cached)]\n        ES --&gt; R3[(Read Model 3&lt;br/&gt;Aggregated)]\n\n        R1 --&gt; RQ[Read Queries]\n        R2 --&gt; RQ\n        R3 --&gt; RQ\n    end\n\n    style WDB fill:#f96\n    style R1 fill:#9f9\n    style R2 fill:#9f9\n    style R3 fill:#9f9</code></pre> <p>Use Cases: - Different read/write patterns - Complex queries needed - High read throughput - Reporting requirements</p>"},{"location":"topics/scalability-patterns/#pattern-9-circuit-breaker","title":"Pattern 9: Circuit Breaker","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; Closed: Normal Operation\n\n    Closed --&gt; Open: Failures exceed threshold\n    Open --&gt; HalfOpen: Timeout expires\n    HalfOpen --&gt; Closed: Success\n    HalfOpen --&gt; Open: Failure\n\n    note right of Closed\n        Allow all requests\n        Track failures\n    end note\n\n    note right of Open\n        Reject all requests\n        Return fallback\n    end note\n\n    note right of HalfOpen\n        Allow limited requests\n        Test if recovered\n    end note</code></pre> <p>Example Flow:</p> <pre><code>sequenceDiagram\n    participant Service A\n    participant Circuit Breaker\n    participant Service B\n\n    Service A-&gt;&gt;Circuit Breaker: Request\n    alt Circuit Closed\n        Circuit Breaker-&gt;&gt;Service B: Forward request\n        Service B--&gt;&gt;Circuit Breaker: Response\n        Circuit Breaker--&gt;&gt;Service A: Response\n    else Circuit Open\n        Circuit Breaker--&gt;&gt;Service A: Fail fast (cached/default)\n    end</code></pre>"},{"location":"topics/scalability-patterns/#pattern-10-rate-limiting","title":"Pattern 10: Rate Limiting","text":""},{"location":"topics/scalability-patterns/#token-bucket-algorithm","title":"Token Bucket Algorithm","text":"<pre><code>graph TB\n    subgraph \"Token Bucket\"\n        Bucket[Bucket&lt;br/&gt;Capacity: 100&lt;br/&gt;Current: 75]\n        Refill[Refill Rate&lt;br/&gt;10 tokens/sec]\n    end\n\n    Request1[Request 1] --&gt;|Consume token| Bucket\n    Request2[Request 2] --&gt;|Consume token| Bucket\n    Request3[Request 3] --&gt;|No tokens| Reject[429 Too Many Requests]\n\n    Refill -.-&gt;|Add tokens| Bucket\n\n    style Bucket fill:#9cf\n    style Reject fill:#f99</code></pre>"},{"location":"topics/scalability-patterns/#sliding-window","title":"Sliding Window","text":"<pre><code>gantt\n    title Rate Limit: 100 requests per minute\n    dateFormat ss\n    axisFormat %S\n\n    section Window 1\n    Requests (80) :00, 30s\n\n    section Window 2\n    Requests (50) :30, 30s\n\n    section Current\n    Allowed? 80*0.5 + 50 = 90 &lt; 100 \u2705 :done, 30, 1s</code></pre>"},{"location":"topics/scalability-patterns/#pattern-11-cdn-edge-computing","title":"Pattern 11: CDN &amp; Edge Computing","text":"<pre><code>graph TB\n    subgraph \"Global Distribution\"\n        User1[User&lt;br/&gt;San Francisco] --&gt; Edge1[Edge Server&lt;br/&gt;US-West]\n        User2[User&lt;br/&gt;London] --&gt; Edge2[Edge Server&lt;br/&gt;EU-West]\n        User3[User&lt;br/&gt;Tokyo] --&gt; Edge3[Edge Server&lt;br/&gt;APAC]\n    end\n\n    Edge1 &amp; Edge2 &amp; Edge3 -.-&gt;|Cache Miss| Origin[Origin Server&lt;br/&gt;US-East]\n\n    Origin --&gt; S3[(Object Storage)]\n\n    style Edge1 fill:#9cf\n    style Edge2 fill:#9cf\n    style Edge3 fill:#9cf\n    style Origin fill:#f96</code></pre> <p>Edge Caching Strategy: - Static assets: Cache 30 days - API responses: Cache 5-60 minutes - Dynamic content: Cache 0-5 minutes</p>"},{"location":"topics/scalability-patterns/#pattern-12-auto-scaling","title":"Pattern 12: Auto-Scaling","text":"<pre><code>graph TB\n    Monitor[Metrics Monitor&lt;br/&gt;CPU, Memory, QPS]\n\n    Monitor --&gt; Decision{Threshold&lt;br/&gt;Exceeded?}\n\n    Decision --&gt;|CPU &gt; 70%| ScaleUp[Scale Up&lt;br/&gt;Add 2 instances]\n    Decision --&gt;|CPU &lt; 30%| ScaleDown[Scale Down&lt;br/&gt;Remove 1 instance]\n    Decision --&gt;|Normal| Wait[Continue Monitoring]\n\n    ScaleUp --&gt; Instances[Update Instance Count]\n    ScaleDown --&gt; Instances\n    Instances --&gt; Monitor\n\n    style Decision fill:#f9f\n    style ScaleUp fill:#9f9\n    style ScaleDown fill:#fc9</code></pre> <p>Scaling Triggers: - CPU utilization &gt; 70% - Memory usage &gt; 80% - Request queue length &gt; 100 - Custom metrics (e.g., order rate)</p>"},{"location":"topics/scalability-patterns/#scaling-comparison-matrix","title":"Scaling Comparison Matrix","text":"<pre><code>graph TB\n    subgraph \"Scaling Approach Selection\"\n        Start{Current Scale}\n\n        Start --&gt;|&lt; 10K users| V[Vertical Scaling&lt;br/&gt;+ Basic Caching]\n        Start --&gt;|10K-100K| H[Horizontal Scaling&lt;br/&gt;+ DB Replicas&lt;br/&gt;+ CDN]\n        Start --&gt;|100K-1M| S[Sharding&lt;br/&gt;+ Microservices&lt;br/&gt;+ Message Queues]\n        Start --&gt;|&gt; 1M| D[Multi-Region&lt;br/&gt;+ Edge Computing&lt;br/&gt;+ Auto-Scaling]\n    end\n\n    style V fill:#9f9\n    style H fill:#9cf\n    style S fill:#ff9\n    style D fill:#f9c</code></pre>"},{"location":"topics/scalability-patterns/#real-world-example-scaling-twitter","title":"Real-World Example: Scaling Twitter","text":"<pre><code>graph TB\n    subgraph \"User Actions\"\n        Post[Post Tweet]\n        Read[Read Timeline]\n    end\n\n    subgraph \"Write Path\"\n        Post --&gt; WLB[Write Load Balancer]\n        WLB --&gt; API1[API Server]\n        API1 --&gt; WDB[(Tweet DB Shard)]\n        API1 --&gt; Cache[Redis Cache]\n        API1 --&gt; MQ[Message Queue]\n        MQ --&gt; Worker[Fan-out Worker]\n        Worker --&gt; Timeline[(Timeline Cache)]\n    end\n\n    subgraph \"Read Path\"\n        Read --&gt; RLB[Read Load Balancer]\n        RLB --&gt; API2[API Server]\n        API2 --&gt; Timeline\n        Timeline -.-&gt;|Cache Miss| TDB[(Timeline DB)]\n    end\n\n    style WLB fill:#f9f\n    style RLB fill:#f9f\n    style Cache fill:#9cf\n    style Timeline fill:#9cf</code></pre> <p>Key Techniques: - Write: Fan-out on write (pre-compute timelines) - Read: Serve from cache (Redis) - Sharding: By user_id hash - Celebrities: Hybrid fan-out (fetch on read)</p>"},{"location":"topics/scalability-patterns/#key-takeaways","title":"Key Takeaways","text":"Pattern Best For Scale Vertical Scaling Early stage, quick wins &lt; 10K users Horizontal Scaling Growing traffic 10K-100K Caching Read-heavy workloads All scales Replication Read scalability 100K+ Sharding Write scalability 1M+ Microservices Large teams, complex domains 100K+ Event-Driven Async workflows All scales CDN Global users, static content All scales CQRS Complex read patterns 1M+ Auto-Scaling Variable traffic All scales <p>\u2190 Back to Topics | Home</p>"}]}